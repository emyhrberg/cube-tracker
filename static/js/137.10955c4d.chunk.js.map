{"version":3,"file":"static/js/137.10955c4d.chunk.js","mappings":"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","sources":["../node_modules/cubing/src/cubing/vendor/mit/cs0x7f/cstimer/src/js/scramble/444-solver.ts","../node_modules/cubing/src/cubing/vendor/mit/cs0x7f/cstimer/src/js/lib/mathlib.ts","../node_modules/cubing/src/cubing/search/inside/solve/puzzles/clock.ts","../node_modules/cubing/src/cubing/vendor/apache/comlink-everywhere/outside/index.ts","../node_modules/cubing/src/cubing/search/instantiator.ts","../node_modules/cubing/src/cubing/search/worker-workarounds/index.ts","../node_modules/cubing/src/cubing/search/outside.ts"],"sourcesContent":["// @ts-nocheck\n\nimport { Alg } from \"../../../../../../../alg\";\nimport { rawRandom333Scramble } from \"../../../../../../../search/cubing-private\";\nimport { circle, Cnk, set8Perm } from \"../lib/mathlib\";\nimport { randomUIntBelow } from \"random-uint-below\";\n\nfunction createArray(length1: number, length2?: number) {\n  const result = new Array<number[]>(length1);\n  if (length2 !== undefined) {\n    for (let i = 0; i < length1; i++) {\n      result[i] = new Array(length2);\n    }\n  }\n  return result;\n}\n\nlet _: any;\nconst seedTable: Record<number, any> = {};\nconst CM$ = {};\nconst Q$Object = 0;\nconst Q$Serializable = 30;\nconst Q$Center1 = 21;\nconst Q$CornerCube = 22;\nconst Q$Edge3 = 23;\nconst Q$FullCube_0 = 24;\nconst Q$FullCube_$1 = 25;\nconst Q$Comparable = 34;\nconst Q$Search_0 = 26;\nconst Q$Object_$1 = 40;\n\nfunction newSeed(id: number) {\n  return new seedTable[id]();\n}\n\nfunction defineSeed(\n  id: number,\n  superSeed: number,\n  castableTypeMap: any, // TODO\n  ...moreArgs: any[]\n) {\n  let seed = seedTable[id];\n  if (seed && !seed.___clazz$) {\n    _ = seed.prototype;\n  } else {\n    !seed && (seed = seedTable[id] = function () {});\n    _ = seed.prototype = superSeed < 0 ? {} : newSeed(superSeed);\n    _.castableTypeMap$ = castableTypeMap;\n  }\n  for (const arg of moreArgs) {\n    arg.prototype = _;\n  }\n  if (seed.___clazz$) {\n    _.___clazz$ = seed.___clazz$;\n    seed.___clazz$ = null;\n  }\n}\n\nfunction makeCastMap(a: number[]) {\n  const result: Record<number, number> = {};\n  for (let i_0 = 0, c = a.length; i_0 < c; ++i_0) {\n    result[a[i_0]] = 1;\n  }\n  return result;\n}\n\ndefineSeed(1, -1, CM$);\n\n_.value = null;\n\nfunction Array_0() {}\n\nfunction createFrom(a: any, length_0: number) {\n  const result = createFromSeed(0, length_0);\n  initValues(a.___clazz$, a.castableTypeMap$, a.queryId$, result);\n  return result;\n}\n\nfunction createFromSeed(seedType: number, length_0: number) {\n  const array = new Array(length_0);\n  if (seedType === 3) {\n    for (let i_0 = 0; i_0 < length_0; ++i_0) {\n      const value = {\n        m: 0,\n        l: 0,\n        h: 0,\n      };\n      value.l = value.m = value.h = 0;\n      array[i_0] = value;\n    }\n  } else if (seedType > 0) {\n    const value = [null, 0, false][seedType];\n    for (let i_0 = 0; i_0 < length_0; ++i_0) {\n      array[i_0] = value;\n    }\n  }\n  return array;\n}\n\nfunction initDim(arrayClass, castableTypeMap, queryId, length_0, seedType) {\n  const result = createFromSeed(seedType, length_0);\n  initValues(arrayClass, castableTypeMap, queryId, result);\n  return result;\n}\n\nfunction initValues(arrayClass, castableTypeMap, queryId, array) {\n  $clinit_Array$ExpandoWrapper();\n  wrapArray(array, expandoNames_0, expandoValues_0);\n  array.___clazz$ = arrayClass;\n  array.castableTypeMap$ = castableTypeMap;\n  array.queryId$ = queryId;\n  return array;\n}\n\nfunction setCheck(array, index, value) {\n  return (array[index] = value);\n}\n\ndefineSeed(73, 1, {}, Array_0);\n_.queryId$ = 0;\n\nlet ran$clinit_Array$ExpandoWrapper = false;\nfunction $clinit_Array$ExpandoWrapper() {\n  if (ran$clinit_Array$ExpandoWrapper) {\n    return;\n  }\n  ran$clinit_Array$ExpandoWrapper = true;\n  expandoNames_0 = [];\n  expandoValues_0 = [];\n  initExpandos(new Array_0(), expandoNames_0, expandoValues_0);\n}\n\nfunction initExpandos(protoType, expandoNames, expandoValues) {\n  let i_0 = 0;\n  let value;\n  for (const name_0 in protoType) {\n    if ((value = protoType[name_0])) {\n      expandoNames[i_0] = name_0;\n      expandoValues[i_0] = value;\n      ++i_0;\n    }\n  }\n}\n\nfunction wrapArray(array, expandoNames, expandoValues) {\n  $clinit_Array$ExpandoWrapper();\n  for (let i_0 = 0, c = expandoNames.length; i_0 < c; ++i_0) {\n    array[expandoNames[i_0]] = expandoValues[i_0];\n  }\n}\n\nlet expandoNames_0;\nlet expandoValues_0;\n\nfunction canCast(src, dstId) {\n  return src.castableTypeMap$ && !!src.castableTypeMap$[dstId];\n}\n\nfunction instanceOf(src, dstId) {\n  return src !== null && canCast(src, dstId);\n}\n\nlet ran$clinit_Center1 = false;\nfunction $clinit_Center1() {\n  if (ran$clinit_Center1) {\n    return false;\n  }\n  ran$clinit_Center1 = true;\n  ctsmv = createArray(15582, 36);\n  sym2raw = createArray(15582);\n  csprun = createArray(15582);\n  symmult = createArray(48, 48);\n  symmove = createArray(48, 36);\n  syminv = createArray(48);\n  finish_0 = createArray(48);\n}\n\nfunction $$init_1(this$static) {\n  this$static.ct = createArray(24);\n}\n\nfunction $equals(this$static, obj) {\n  let c;\n  let i_0;\n  if (instanceOf(obj, Q$Center1)) {\n    c = obj;\n    for (i_0 = 0; i_0 < 24; ++i_0) {\n      if (this$static.ct[i_0] !== c.ct[i_0]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction $get_1(this$static) {\n  let i_0;\n  let idx;\n  let r;\n  idx = 0;\n  r = 8;\n  for (i_0 = 23; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] === 1 && (idx += Cnk[i_0][r--]);\n  }\n  return idx;\n}\n\nfunction $getsym(this$static) {\n  let cord;\n  let j;\n  if (raw2sym !== null) {\n    return raw2sym[$get_1(this$static)];\n  }\n  for (j = 0; j < 48; ++j) {\n    cord = raw2sym_0($get_1(this$static));\n    if (cord !== -1) {\n      return cord * 64 + j;\n    }\n    $rot(this$static, 0);\n    j % 2 === 1 && $rot(this$static, 1);\n    j % 8 === 7 && $rot(this$static, 2);\n    j % 16 === 15 && $rot(this$static, 3);\n  }\n}\n\nfunction $move(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0: {\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    }\n    case 1: {\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      break;\n    }\n    case 2: {\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    }\n    case 3: {\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    }\n    case 4: {\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      break;\n    }\n    case 5: {\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    }\n    case 6: {\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.ct, 8, 20, 12, 16, key);\n      swap(this$static.ct, 9, 21, 13, 17, key);\n      break;\n    }\n    case 7: {\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    }\n    case 8: {\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.ct, 2, 19, 4, 21, key);\n      swap(this$static.ct, 3, 16, 5, 22, key);\n      break;\n    }\n    case 9: {\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.ct, 10, 18, 14, 22, key);\n      swap(this$static.ct, 11, 19, 15, 23, key);\n      break;\n    }\n    case 10: {\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    }\n    case 11: {\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.ct, 1, 20, 7, 18, key);\n      swap(this$static.ct, 0, 23, 6, 17, key);\n    }\n  }\n}\n\nfunction $rot(this$static, r) {\n  switch (r) {\n    case 0: {\n      $move(this$static, 19);\n      $move(this$static, 28);\n      break;\n    }\n    case 1: {\n      $move(this$static, 21);\n      $move(this$static, 32);\n      break;\n    }\n    case 2: {\n      swap(this$static.ct, 0, 3, 1, 2, 1);\n      swap(this$static.ct, 8, 11, 9, 10, 1);\n      swap(this$static.ct, 4, 7, 5, 6, 1);\n      swap(this$static.ct, 12, 15, 13, 14, 1);\n      swap(this$static.ct, 16, 19, 21, 22, 1);\n      swap(this$static.ct, 17, 18, 20, 23, 1);\n      break;\n    }\n    case 3: {\n      $move(this$static, 18);\n      $move(this$static, 29);\n      $move(this$static, 24);\n      $move(this$static, 35);\n    }\n  }\n}\n\nfunction $rotate(this$static, r) {\n  let j;\n  for (j = 0; j < r; ++j) {\n    $rot(this$static, 0);\n    j % 2 === 1 && $rot(this$static, 1);\n    j % 8 === 7 && $rot(this$static, 2);\n    j % 16 === 15 && $rot(this$static, 3);\n  }\n}\n\nfunction $set_0(this$static, idx) {\n  let i_0;\n  let r;\n  r = 8;\n  for (i_0 = 23; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] = 0;\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ct[i_0] = 1;\n    }\n  }\n}\n\nfunction $set_1(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ct[i_0] = c.ct[i_0];\n  }\n}\n\nfunction Center1_0() {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this.ct[i_0] = 1;\n  }\n  for (i_0 = 8; i_0 < 24; ++i_0) {\n    this.ct[i_0] = 0;\n  }\n}\n\nfunction Center1_1(c, urf) {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ~~(c.ct[i_0] / 2) === urf ? 1 : 0;\n  }\n}\n\nfunction Center1_2(ct) {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ct[i_0];\n  }\n}\n\nfunction createMoveTable() {\n  let i_0;\n  let m_0;\n  const c = new Center1_0();\n  const d = new Center1_0();\n  for (i_0 = 0; i_0 < 15582; ++i_0) {\n    $set_0(d, sym2raw[i_0]);\n    for (m_0 = 0; m_0 < 36; ++m_0) {\n      $set_1(c, d);\n      $move(c, m_0);\n      ctsmv[i_0][m_0] = $getsym(c);\n    }\n  }\n}\n\nfunction createPrun() {\n  let check;\n  let depth;\n  let done;\n  let i_0;\n  let idx;\n  let inv;\n  let m_0;\n  let select;\n  fill_0(csprun);\n  csprun[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done !== 15582) {\n    inv = depth > 4;\n    select = inv ? -1 : depth;\n    check = inv ? depth : -1;\n    ++depth;\n    for (i_0 = 0; i_0 < 15582; ++i_0) {\n      if (csprun[i_0] !== select) {\n        continue;\n      }\n      for (m_0 = 0; m_0 < 27; ++m_0) {\n        idx = ~~ctsmv[i_0][m_0] >>> 6;\n        if (csprun[idx] !== check) {\n          continue;\n        }\n        ++done;\n        if (inv) {\n          csprun[i_0] = depth;\n          break;\n        } else {\n          csprun[idx] = depth;\n        }\n      }\n    }\n  }\n}\n\nfunction getSolvedSym(cube) {\n  let check;\n  let i_0;\n  let j;\n  const c = new Center1_2(cube.ct);\n  for (j = 0; j < 48; ++j) {\n    check = true;\n    for (i_0 = 0; i_0 < 24; ++i_0) {\n      if (c.ct[i_0] !== ~~(i_0 / 4)) {\n        check = false;\n        break;\n      }\n    }\n    if (check) {\n      return j;\n    }\n    $rot(c, 0);\n    j % 2 === 1 && $rot(c, 1);\n    j % 8 === 7 && $rot(c, 2);\n    j % 16 === 15 && $rot(c, 3);\n  }\n  return -1;\n}\n\nfunction initSym_0() {\n  let i_0;\n  let j;\n  let k_0;\n  const c = new Center1_0();\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    c.ct[i_0] = i_0;\n  }\n  const d = new Center1_2(c.ct);\n  const e = new Center1_2(c.ct);\n  const f = new Center1_2(c.ct);\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    for (j = 0; j < 48; ++j) {\n      for (k_0 = 0; k_0 < 48; ++k_0) {\n        if ($equals(c, d)) {\n          symmult[i_0][j] = k_0;\n          k_0 === 0 && (syminv[i_0] = j);\n        }\n        $rot(d, 0);\n        k_0 % 2 === 1 && $rot(d, 1);\n        k_0 % 8 === 7 && $rot(d, 2);\n        k_0 % 16 === 15 && $rot(d, 3);\n      }\n      $rot(c, 0);\n      j % 2 === 1 && $rot(c, 1);\n      j % 8 === 7 && $rot(c, 2);\n      j % 16 === 15 && $rot(c, 3);\n    }\n    $rot(c, 0);\n    i_0 % 2 === 1 && $rot(c, 1);\n    i_0 % 8 === 7 && $rot(c, 2);\n    i_0 % 16 === 15 && $rot(c, 3);\n  }\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    $set_1(c, e);\n    $rotate(c, syminv[i_0]);\n    for (j = 0; j < 36; ++j) {\n      $set_1(d, c);\n      $move(d, j);\n      $rotate(d, i_0);\n      for (k_0 = 0; k_0 < 36; ++k_0) {\n        $set_1(f, e);\n        $move(f, k_0);\n        if ($equals(f, d)) {\n          symmove[i_0][j] = k_0;\n          break;\n        }\n      }\n    }\n  }\n  $set_0(c, 0);\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    finish_0[syminv[i_0]] = $get_1(c);\n    $rot(c, 0);\n    i_0 % 2 === 1 && $rot(c, 1);\n    i_0 % 8 === 7 && $rot(c, 2);\n    i_0 % 16 === 15 && $rot(c, 3);\n  }\n}\n\nfunction initSym2Raw() {\n  let count;\n  let i_0;\n  let idx;\n  let j;\n  const c = new Center1_0();\n  const occ = createArray(22984);\n  for (i_0 = 0; i_0 < 22984; i_0++) {\n    occ[i_0] = 0;\n  }\n  count = 0;\n  for (i_0 = 0; i_0 < 735471; ++i_0) {\n    if ((occ[~~i_0 >>> 5] & (1 << (i_0 & 31))) === 0) {\n      $set_0(c, i_0);\n      for (j = 0; j < 48; ++j) {\n        idx = $get_1(c);\n        occ[~~idx >>> 5] |= 1 << (idx & 31);\n        raw2sym !== null && (raw2sym[idx] = (count << 6) | syminv[j]);\n        $rot(c, 0);\n        j % 2 === 1 && $rot(c, 1);\n        j % 8 === 7 && $rot(c, 2);\n        j % 16 === 15 && $rot(c, 3);\n      }\n      sym2raw[count++] = i_0;\n    }\n  }\n}\n\nfunction raw2sym_0(n) {\n  const m_0 = binarySearch_0(sym2raw, n);\n  return m_0 >= 0 ? m_0 : -1;\n}\n\ndefineSeed(153, 1, makeCastMap([Q$Center1]), Center1_0, Center1_1, Center1_2);\n\nlet csprun;\nlet ctsmv;\nlet finish_0;\nlet raw2sym = null;\nlet sym2raw;\nlet syminv;\nlet symmove;\nlet symmult;\n\nlet ran$clinit_Center2 = false;\nfunction $clinit_Center2() {\n  if (ran$clinit_Center2) {\n    return;\n  }\n  ran$clinit_Center2 = true;\n  rlmv = createArray(70, 28);\n  ctmv = createArray(6435, 28);\n  rlrot = createArray(70, 16);\n  ctrot = createArray(6435, 16);\n  ctprun = createArray(450450);\n  pmv = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,\n    0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,\n  ];\n}\n\nfunction $getct(this$static) {\n  let i_0;\n  let idx;\n  let r;\n  idx = 0;\n  r = 8;\n  for (i_0 = 14; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] !== this$static.ct[15] && (idx += Cnk[i_0][r--]);\n  }\n  return idx;\n}\n\nfunction $getrl(this$static) {\n  let i_0;\n  let idx;\n  let r;\n  idx = 0;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] !== this$static.rl[7] && (idx += Cnk[i_0][r--]);\n  }\n  return idx * 2 + this$static.parity;\n}\n\nfunction $move_0(this$static, m_0) {\n  this$static.parity ^= pmv[m_0];\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0: {\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    }\n    case 1: {\n      swap(this$static.rl, 0, 1, 2, 3, key);\n      break;\n    }\n    case 2: {\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    }\n    case 3: {\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    }\n    case 4: {\n      swap(this$static.rl, 4, 5, 6, 7, key);\n      break;\n    }\n    case 5: {\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    }\n    case 6: {\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.rl, 0, 5, 4, 1, key);\n      swap(this$static.ct, 8, 9, 12, 13, key);\n      break;\n    }\n    case 7: {\n      swap(this$static.rl, 0, 1, 2, 3, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    }\n    case 8: {\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.rl, 0, 3, 6, 5, key);\n      swap(this$static.ct, 3, 2, 5, 4, key);\n      break;\n    }\n    case 9: {\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.rl, 3, 2, 7, 6, key);\n      swap(this$static.ct, 11, 10, 15, 14, key);\n      break;\n    }\n    case 10: {\n      swap(this$static.rl, 4, 5, 6, 7, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    }\n    case 11: {\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.rl, 1, 4, 7, 2, key);\n      swap(this$static.ct, 1, 0, 7, 6, key);\n    }\n  }\n}\n\nfunction $rot_0(this$static, r) {\n  switch (r) {\n    case 0: {\n      $move_0(this$static, 19);\n      $move_0(this$static, 28);\n      break;\n    }\n    case 1: {\n      $move_0(this$static, 21);\n      $move_0(this$static, 32);\n      break;\n    }\n    case 2: {\n      swap(this$static.ct, 0, 3, 1, 2, 1);\n      swap(this$static.ct, 8, 11, 9, 10, 1);\n      swap(this$static.ct, 4, 7, 5, 6, 1);\n      swap(this$static.ct, 12, 15, 13, 14, 1);\n      swap(this$static.rl, 0, 3, 5, 6, 1);\n      swap(this$static.rl, 1, 2, 4, 7, 1);\n    }\n  }\n}\n\nfunction $set_2(this$static, c, edgeParity) {\n  let i_0;\n  for (i_0 = 0; i_0 < 16; ++i_0) {\n    this$static.ct[i_0] = ~~(c.ct[i_0] / 2);\n  }\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.rl[i_0] = c.ct[i_0 + 16];\n  }\n  this$static.parity = edgeParity;\n}\n\nfunction $setct(this$static, idx) {\n  let i_0;\n  let r;\n  r = 8;\n  this$static.ct[15] = 0;\n  for (i_0 = 14; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ct[i_0] = 1;\n    } else {\n      this$static.ct[i_0] = 0;\n    }\n  }\n}\n\nfunction $setrl(this$static, idx) {\n  let i_0;\n  let r;\n  this$static.parity = idx & 1;\n  idx >>>= 1;\n  r = 4;\n  this$static.rl[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.rl[i_0] = 1;\n    } else {\n      this$static.rl[i_0] = 0;\n    }\n  }\n}\n\nfunction Center2_0() {\n  this.rl = createArray(8);\n  this.ct = createArray(16);\n}\n\nfunction init_3() {\n  let ct;\n  let ctx;\n  let depth;\n  let done;\n  let i_0;\n  let idx;\n  let j;\n  let m_0;\n  let rl;\n  let rlx;\n  const c = new Center2_0();\n  for (i_0 = 0; i_0 < 70; ++i_0) {\n    for (m_0 = 0; m_0 < 28; ++m_0) {\n      $setrl(c, i_0);\n      $move_0(c, move2std[m_0]);\n      rlmv[i_0][m_0] = $getrl(c);\n    }\n  }\n  for (i_0 = 0; i_0 < 70; ++i_0) {\n    $setrl(c, i_0);\n    for (j = 0; j < 16; ++j) {\n      rlrot[i_0][j] = $getrl(c);\n      $rot_0(c, 0);\n      j % 2 === 1 && $rot_0(c, 1);\n      j % 8 === 7 && $rot_0(c, 2);\n    }\n  }\n  for (i_0 = 0; i_0 < 6435; ++i_0) {\n    $setct(c, i_0);\n    for (j = 0; j < 16; ++j) {\n      ctrot[i_0][j] = $getct(c) & 65535;\n      $rot_0(c, 0);\n      j % 2 === 1 && $rot_0(c, 1);\n      j % 8 === 7 && $rot_0(c, 2);\n    }\n  }\n  for (i_0 = 0; i_0 < 6435; ++i_0) {\n    for (m_0 = 0; m_0 < 28; ++m_0) {\n      $setct(c, i_0);\n      $move_0(c, move2std[m_0]);\n      ctmv[i_0][m_0] = $getct(c) & 65535;\n    }\n  }\n  fill_0(ctprun);\n  ctprun[0] =\n    ctprun[18] =\n    ctprun[28] =\n    ctprun[46] =\n    ctprun[54] =\n    ctprun[56] =\n      0;\n  depth = 0;\n  done = 6;\n\n  while (done !== 450450) {\n    const inv = depth > 6;\n    const select = inv ? -1 : depth;\n    const check = inv ? depth : -1;\n    ++depth;\n    for (i_0 = 0; i_0 < 450450; ++i_0) {\n      if (ctprun[i_0] !== select) {\n        continue;\n      }\n      ct = ~~(i_0 / 70);\n      rl = i_0 % 70;\n      for (m_0 = 0; m_0 < 23; ++m_0) {\n        ctx = ctmv[ct][m_0];\n        rlx = rlmv[rl][m_0];\n        idx = ctx * 70 + rlx;\n        if (ctprun[idx] !== check) {\n          continue;\n        }\n        ++done;\n        if (inv) {\n          ctprun[i_0] = depth;\n          break;\n        } else {\n          ctprun[idx] = depth;\n        }\n      }\n    }\n  }\n}\n\ndefineSeed(154, 1, {}, Center2_0);\n_.parity = 0;\nlet ctmv;\nlet ctprun;\nlet ctrot;\nlet pmv;\nlet rlmv;\nlet rlrot;\n\nlet ran$clinit_Center3 = false;\nfunction $clinit_Center3() {\n  if (ran$clinit_Center3) {\n    return;\n  }\n  ran$clinit_Center3 = true;\n  ctmove = createArray(29400, 20);\n  pmove = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1];\n  prun_0 = createArray(29400);\n  rl2std = [0, 9, 14, 23, 27, 28, 41, 42, 46, 55, 60, 69];\n  std2rl = createArray(70);\n}\n\nfunction $getct_0(this$static) {\n  let i_0;\n  let idx;\n  let idxrl;\n  let r;\n  idx = 0;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.ud[i_0] !== this$static.ud[7] && (idx += Cnk[i_0][r--]);\n  }\n  idx *= 35;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.fb[i_0] !== this$static.fb[7] && (idx += Cnk[i_0][r--]);\n  }\n  idx *= 12;\n  const check = this$static.fb[7] ^ this$static.ud[7];\n  idxrl = 0;\n  r = 4;\n  for (i_0 = 7; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] !== check && (idxrl += Cnk[i_0][r--]);\n  }\n  return this$static.parity + 2 * (idx + std2rl[idxrl]);\n}\n\nfunction $move_1(this$static, i_0) {\n  this$static.parity ^= pmove[i_0];\n  switch (i_0) {\n    case 0:\n    case 1:\n    case 2: {\n      swap(this$static.ud, 0, 1, 2, 3, i_0 % 3);\n      break;\n    }\n    case 3: {\n      swap(this$static.rl, 0, 1, 2, 3, 1);\n      break;\n    }\n    case 4:\n    case 5:\n    case 6: {\n      swap(this$static.fb, 0, 1, 2, 3, (i_0 - 1) % 3);\n      break;\n    }\n    case 7:\n    case 8:\n    case 9: {\n      swap(this$static.ud, 4, 5, 6, 7, (i_0 - 1) % 3);\n      break;\n    }\n    case 10: {\n      swap(this$static.rl, 4, 5, 6, 7, 1);\n      break;\n    }\n    case 11:\n    case 12:\n    case 13: {\n      swap(this$static.fb, 4, 5, 6, 7, (i_0 + 1) % 3);\n      break;\n    }\n    case 14: {\n      swap(this$static.ud, 0, 1, 2, 3, 1);\n      swap(this$static.rl, 0, 5, 4, 1, 1);\n      swap(this$static.fb, 0, 5, 4, 1, 1);\n      break;\n    }\n    case 15: {\n      swap(this$static.rl, 0, 1, 2, 3, 1);\n      swap(this$static.fb, 1, 4, 7, 2, 1);\n      swap(this$static.ud, 1, 6, 5, 2, 1);\n      break;\n    }\n    case 16: {\n      swap(this$static.fb, 0, 1, 2, 3, 1);\n      swap(this$static.ud, 3, 2, 5, 4, 1);\n      swap(this$static.rl, 0, 3, 6, 5, 1);\n      break;\n    }\n    case 17: {\n      swap(this$static.ud, 4, 5, 6, 7, 1);\n      swap(this$static.rl, 3, 2, 7, 6, 1);\n      swap(this$static.fb, 3, 2, 7, 6, 1);\n      break;\n    }\n    case 18: {\n      swap(this$static.rl, 4, 5, 6, 7, 1);\n      swap(this$static.fb, 0, 3, 6, 5, 1);\n      swap(this$static.ud, 0, 3, 4, 7, 1);\n      break;\n    }\n    case 19: {\n      swap(this$static.fb, 4, 5, 6, 7, 1);\n      swap(this$static.ud, 0, 7, 6, 1, 1);\n      swap(this$static.rl, 1, 4, 7, 2, 1);\n    }\n  }\n}\n\nfunction $set_3(this$static, c, eXc_parity) {\n  let i_0;\n  const parity =\n    (c.ct[0] > c.ct[8] ? 1 : 0) ^\n    (c.ct[8] > c.ct[16] ? 1 : 0) ^\n    (c.ct[0] > c.ct[16] ? 1 : 0)\n      ? 1\n      : 0;\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.ud[i_0] = (c.ct[i_0] & 1) ^ 1;\n    this$static.fb[i_0] = (c.ct[i_0 + 8] & 1) ^ 1;\n    this$static.rl[i_0] = (c.ct[i_0 + 16] & 1) ^ 1 ^ parity;\n  }\n  this$static.parity = parity ^ eXc_parity;\n}\n\nfunction $setct_0(this$static, idx) {\n  let i_0;\n  let idxfb;\n  let idxrl;\n  let r;\n  this$static.parity = idx & 1;\n  idx >>>= 1;\n  idxrl = rl2std[idx % 12];\n  idx = ~~(idx / 12);\n  r = 4;\n  for (i_0 = 7; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] = 0;\n    if (idxrl >= Cnk[i_0][r]) {\n      idxrl -= Cnk[i_0][r--];\n      this$static.rl[i_0] = 1;\n    }\n  }\n  idxfb = idx % 35;\n  idx = ~~(idx / 35);\n  r = 4;\n  this$static.fb[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idxfb >= Cnk[i_0][r]) {\n      idxfb -= Cnk[i_0][r--];\n      this$static.fb[i_0] = 1;\n    } else {\n      this$static.fb[i_0] = 0;\n    }\n  }\n  r = 4;\n  this$static.ud[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ud[i_0] = 1;\n    } else {\n      this$static.ud[i_0] = 0;\n    }\n  }\n}\n\nfunction Center3_0() {\n  this.ud = createArray(8);\n  this.rl = createArray(8);\n  this.fb = createArray(8);\n}\n\nfunction init_4() {\n  let depth;\n  let done;\n  let i_0;\n  let m_0;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    std2rl[rl2std[i_0]] = i_0;\n  }\n  const c = new Center3_0();\n  for (i_0 = 0; i_0 < 29400; ++i_0) {\n    for (m_0 = 0; m_0 < 20; ++m_0) {\n      $setct_0(c, i_0);\n      $move_1(c, m_0);\n      ctmove[i_0][m_0] = $getct_0(c) & 65535;\n    }\n  }\n  fill_0(prun_0);\n  prun_0[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done !== 29400) {\n    for (i_0 = 0; i_0 < 29400; ++i_0) {\n      if (prun_0[i_0] !== depth) {\n        continue;\n      }\n      for (m_0 = 0; m_0 < 17; ++m_0) {\n        if (prun_0[ctmove[i_0][m_0]] === -1) {\n          prun_0[ctmove[i_0][m_0]] = depth + 1;\n          ++done;\n        }\n      }\n    }\n    ++depth;\n  }\n}\n\ndefineSeed(155, 1, {}, Center3_0);\n_.parity = 0;\nlet ctmove;\nlet pmove;\nlet prun_0;\nlet rl2std;\nlet std2rl;\n\nfunction $copy_1(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ct[i_0] = c.ct[i_0];\n  }\n}\n\nfunction $move_2(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0: {\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    }\n    case 1: {\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      break;\n    }\n    case 2: {\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    }\n    case 3: {\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    }\n    case 4: {\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      break;\n    }\n    case 5: {\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    }\n    case 6: {\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.ct, 8, 20, 12, 16, key);\n      swap(this$static.ct, 9, 21, 13, 17, key);\n      break;\n    }\n    case 7: {\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    }\n    case 8: {\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.ct, 2, 19, 4, 21, key);\n      swap(this$static.ct, 3, 16, 5, 22, key);\n      break;\n    }\n    case 9: {\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.ct, 10, 18, 14, 22, key);\n      swap(this$static.ct, 11, 19, 15, 23, key);\n      break;\n    }\n    case 10: {\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    }\n    case 11: {\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.ct, 1, 20, 7, 18, key);\n      swap(this$static.ct, 0, 23, 6, 17, key);\n    }\n  }\n}\n\nfunction CenterCube_0() {\n  let i_0;\n  this.ct = createArray(24);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ~~(i_0 / 4);\n  }\n}\n\nfunction CenterCube_1() {\n  let i_0;\n  let m_0;\n  let t;\n  CenterCube_0.call(this);\n  for (i_0 = 0; i_0 < 23; ++i_0) {\n    t = i_0 + randomUIntBelow(24 - i_0);\n    if (this.ct[t] !== this.ct[i_0]) {\n      m_0 = this.ct[i_0];\n      this.ct[i_0] = this.ct[t];\n      this.ct[t] = m_0;\n    }\n  }\n}\n\ndefineSeed(156, 1, {}, CenterCube_0, CenterCube_1);\n\nlet ran$clinit_CornerCube = false;\nfunction $clinit_CornerCube() {\n  if (ran$clinit_CornerCube) {\n    return;\n  }\n  ran$clinit_CornerCube = true;\n  moveCube_0 = createArray(18);\n  initMove_0();\n}\n\nfunction $$init_2(this$static) {\n  this$static.cp = [0, 1, 2, 3, 4, 5, 6, 7];\n  this$static.co = [0, 0, 0, 0, 0, 0, 0, 0];\n}\n\nfunction $copy_2(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.cp[i_0] = c.cp[i_0];\n    this$static.co[i_0] = c.co[i_0];\n  }\n}\n\nfunction $move_3(this$static, idx) {\n  !this$static.temps && (this$static.temps = new CornerCube_0());\n  CornMult_0(this$static, moveCube_0[idx], this$static.temps);\n  $copy_2(this$static, this$static.temps);\n}\n\nfunction $setTwist_0(this$static, idx) {\n  let i_0;\n  let twst;\n  twst = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    twst += this$static.co[i_0] = idx % 3;\n    idx = ~~(idx / 3);\n  }\n  this$static.co[7] = (15 - twst) % 3;\n}\n\nfunction CornMult_0(a, b, prod) {\n  let corn;\n  let ori;\n  let oriA;\n  let oriB;\n  for (corn = 0; corn < 8; ++corn) {\n    prod.cp[corn] = a.cp[b.cp[corn]];\n    oriA = a.co[b.cp[corn]];\n    oriB = b.co[corn];\n    ori = oriA;\n    ori = ori + (oriA < 3 ? oriB : 6 - oriB);\n    ori = ori % 3;\n    (oriA >= 3 ? 1 : 0) ^ (oriB >= 3 ? 1 : 0) && (ori = ori + 3);\n    prod.co[corn] = ori;\n  }\n}\n\nfunction CornerCube_0() {\n  $$init_2(this);\n}\n\nfunction CornerCube_1(cperm, twist) {\n  $$init_2(this);\n  set8Perm(this.cp, cperm);\n  $setTwist_0(this, twist);\n}\n\nfunction CornerCube_2() {\n  CornerCube_1.call(this, randomUIntBelow(40320), randomUIntBelow(2187));\n}\n\nfunction initMove_0() {\n  let a;\n  let p_0;\n  moveCube_0[0] = new CornerCube_1(15120, 0);\n  moveCube_0[3] = new CornerCube_1(21021, 1494);\n  moveCube_0[6] = new CornerCube_1(8064, 1236);\n  moveCube_0[9] = new CornerCube_1(9, 0);\n  moveCube_0[12] = new CornerCube_1(1230, 412);\n  moveCube_0[15] = new CornerCube_1(224, 137);\n  for (a = 0; a < 18; a += 3) {\n    for (p_0 = 0; p_0 < 2; ++p_0) {\n      moveCube_0[a + p_0 + 1] = new CornerCube_0();\n      CornMult_0(moveCube_0[a + p_0], moveCube_0[a], moveCube_0[a + p_0 + 1]);\n    }\n  }\n}\n\ndefineSeed(\n  157,\n  1,\n  makeCastMap([Q$CornerCube]),\n  CornerCube_0,\n  CornerCube_1,\n  CornerCube_2,\n);\n_.temps = null;\nlet moveCube_0;\n\nlet ran$clinit_Edge3 = false;\nfunction $clinit_Edge3() {\n  if (ran$clinit_Edge3) {\n    return;\n  }\n  ran$clinit_Edge3 = true;\n  eprun = createArray(1937880);\n  sym2raw_0 = createArray(1538);\n  symstate = createArray(1538);\n  raw2sym_1 = createArray(11880);\n  syminv_0 = [0, 1, 6, 3, 4, 5, 2, 7];\n  mvrot = createArray(160, 12);\n  mvroto = createArray(160, 12);\n  factX = [\n    1, 1, 1, 3, 12, 60, 360, 2520, 20160, 181440, 1814400, 19958400, 239500800,\n  ];\n  FullEdgeMap = [0, 2, 4, 6, 1, 3, 7, 5, 8, 9, 10, 11];\n}\n\nfunction $circlex(this$static, a, b, c, d) {\n  const temp = this$static.edgeo[d];\n  this$static.edgeo[d] = this$static.edge[c];\n  this$static.edge[c] = this$static.edgeo[b];\n  this$static.edgeo[b] = this$static.edge[a];\n  this$static.edge[a] = temp;\n}\n\nfunction $get_2(this$static, end) {\n  let i_0;\n  let idx;\n  let v;\n  let valh;\n  let vall;\n  this$static.isStd || $std(this$static);\n  idx = 0;\n  vall = 1985229328;\n  valh = 47768;\n  for (i_0 = 0; i_0 < end; ++i_0) {\n    v = this$static.edge[i_0] << 2;\n    idx *= 12 - i_0;\n    if (v >= 32) {\n      idx += (valh >> (v - 32)) & 15;\n      valh -= 4368 << (v - 32);\n    } else {\n      idx += (vall >> v) & 15;\n      valh -= 4369;\n      vall -= 286331152 << v;\n    }\n  }\n  return idx;\n}\n\nfunction $getsym_0(this$static) {\n  let symcord1x;\n  const cord1x = $get_2(this$static, 4);\n  symcord1x = raw2sym_1[cord1x];\n  const symx = symcord1x & 7;\n  symcord1x >>= 3;\n  $rotate_0(this$static, symx);\n  const cord2x = $get_2(this$static, 10) % 20160;\n  return symcord1x * 20160 + cord2x;\n}\n\nfunction $move_4(this$static, i_0) {\n  this$static.isStd = false;\n  switch (i_0) {\n    case 0: {\n      circle(this$static.edge, 0, 4, 1, 5);\n      circle(this$static.edgeo, 0, 4, 1, 5);\n      break;\n    }\n    case 1: {\n      $swap_0(this$static.edge, 0, 4, 1, 5);\n      $swap_0(this$static.edgeo, 0, 4, 1, 5);\n      break;\n    }\n    case 2: {\n      circle(this$static.edge, 0, 5, 1, 4);\n      circle(this$static.edgeo, 0, 5, 1, 4);\n      break;\n    }\n    case 3: {\n      $swap_0(this$static.edge, 5, 10, 6, 11);\n      $swap_0(this$static.edgeo, 5, 10, 6, 11);\n      break;\n    }\n    case 4: {\n      circle(this$static.edge, 0, 11, 3, 8);\n      circle(this$static.edgeo, 0, 11, 3, 8);\n      break;\n    }\n    case 5: {\n      $swap_0(this$static.edge, 0, 11, 3, 8);\n      $swap_0(this$static.edgeo, 0, 11, 3, 8);\n      break;\n    }\n    case 6: {\n      circle(this$static.edge, 0, 8, 3, 11);\n      circle(this$static.edgeo, 0, 8, 3, 11);\n      break;\n    }\n    case 7: {\n      circle(this$static.edge, 2, 7, 3, 6);\n      circle(this$static.edgeo, 2, 7, 3, 6);\n      break;\n    }\n    case 8: {\n      $swap_0(this$static.edge, 2, 7, 3, 6);\n      $swap_0(this$static.edgeo, 2, 7, 3, 6);\n      break;\n    }\n    case 9: {\n      circle(this$static.edge, 2, 6, 3, 7);\n      circle(this$static.edgeo, 2, 6, 3, 7);\n      break;\n    }\n    case 10: {\n      $swap_0(this$static.edge, 4, 8, 7, 9);\n      $swap_0(this$static.edgeo, 4, 8, 7, 9);\n      break;\n    }\n    case 11: {\n      circle(this$static.edge, 1, 9, 2, 10);\n      circle(this$static.edgeo, 1, 9, 2, 10);\n      break;\n    }\n    case 12: {\n      $swap_0(this$static.edge, 1, 9, 2, 10);\n      $swap_0(this$static.edgeo, 1, 9, 2, 10);\n      break;\n    }\n    case 13: {\n      circle(this$static.edge, 1, 10, 2, 9);\n      circle(this$static.edgeo, 1, 10, 2, 9);\n      break;\n    }\n    case 14: {\n      $swap_0(this$static.edge, 0, 4, 1, 5);\n      $swap_0(this$static.edgeo, 0, 4, 1, 5);\n      circle(this$static.edge, 9, 11);\n      circle(this$static.edgeo, 8, 10);\n      break;\n    }\n    case 15: {\n      $swap_0(this$static.edge, 5, 10, 6, 11);\n      $swap_0(this$static.edgeo, 5, 10, 6, 11);\n      circle(this$static.edge, 1, 3);\n      circle(this$static.edgeo, 0, 2);\n      break;\n    }\n    case 16: {\n      $swap_0(this$static.edge, 0, 11, 3, 8);\n      $swap_0(this$static.edgeo, 0, 11, 3, 8);\n      circle(this$static.edge, 5, 7);\n      circle(this$static.edgeo, 4, 6);\n      break;\n    }\n    case 17: {\n      $swap_0(this$static.edge, 2, 7, 3, 6);\n      $swap_0(this$static.edgeo, 2, 7, 3, 6);\n      circle(this$static.edge, 8, 10);\n      circle(this$static.edgeo, 9, 11);\n      break;\n    }\n    case 18: {\n      $swap_0(this$static.edge, 4, 8, 7, 9);\n      $swap_0(this$static.edgeo, 4, 8, 7, 9);\n      circle(this$static.edge, 0, 2);\n      circle(this$static.edgeo, 1, 3);\n      break;\n    }\n    case 19: {\n      $swap_0(this$static.edge, 1, 9, 2, 10);\n      $swap_0(this$static.edgeo, 1, 9, 2, 10);\n      circle(this$static.edge, 4, 6);\n      circle(this$static.edgeo, 5, 7);\n    }\n  }\n}\n\nfunction $rot_1(this$static, r) {\n  this$static.isStd = false;\n  switch (r) {\n    case 0: {\n      $move_4(this$static, 14);\n      $move_4(this$static, 17);\n      break;\n    }\n    case 1: {\n      $circlex(this$static, 11, 5, 10, 6);\n      $circlex(this$static, 5, 10, 6, 11);\n      $circlex(this$static, 1, 2, 3, 0);\n      $circlex(this$static, 4, 9, 7, 8);\n      $circlex(this$static, 8, 4, 9, 7);\n      $circlex(this$static, 0, 1, 2, 3);\n      break;\n    }\n    case 2: {\n      $swapx(this$static, 4, 5);\n      $swapx(this$static, 5, 4);\n      $swapx(this$static, 11, 8);\n      $swapx(this$static, 8, 11);\n      $swapx(this$static, 7, 6);\n      $swapx(this$static, 6, 7);\n      $swapx(this$static, 9, 10);\n      $swapx(this$static, 10, 9);\n      $swapx(this$static, 1, 1);\n      $swapx(this$static, 0, 0);\n      $swapx(this$static, 3, 3);\n      $swapx(this$static, 2, 2);\n    }\n  }\n}\n\nfunction $rotate_0(this$static, r) {\n  while (r >= 2) {\n    r -= 2;\n    $rot_1(this$static, 1);\n    $rot_1(this$static, 2);\n  }\n  r !== 0 && $rot_1(this$static, 0);\n}\n\nfunction $set_4(this$static, idx) {\n  let i_0;\n  let p_0;\n  let parity;\n  let v;\n  let vall;\n  let valh;\n  vall = 0x76543210;\n  valh = 0xba98;\n  parity = 0;\n  for (i_0 = 0; i_0 < 11; ++i_0) {\n    p_0 = factX[11 - i_0];\n    v = ~~(idx / p_0);\n    idx = idx % p_0;\n    parity ^= v;\n    v <<= 2;\n    if (v >= 32) {\n      v = v - 32;\n      this$static.edge[i_0] = (valh >> v) & 15;\n      const m = (1 << v) - 1;\n      valh = (valh & m) + ((valh >> 4) & ~m);\n    } else {\n      this$static.edge[i_0] = (vall >> v) & 15;\n      const m = (1 << v) - 1;\n      vall = (vall & m) + ((vall >>> 4) & ~m) + (valh << 28);\n      valh = valh >> 4;\n    }\n  }\n  if ((parity & 1) === 0) {\n    this$static.edge[11] = vall;\n  } else {\n    this$static.edge[11] = this$static.edge[10];\n    this$static.edge[10] = vall;\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edgeo[i_0] = i_0;\n  }\n  this$static.isStd = true;\n}\n\nfunction $set_5(this$static, e) {\n  let i_0;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = e.edge[i_0];\n    this$static.edgeo[i_0] = e.edgeo[i_0];\n  }\n  this$static.isStd = e.isStd;\n}\n\nfunction $set_6(this$static, c) {\n  let i_0;\n  let parity;\n  let s;\n  let t;\n  this$static.temp === null && (this$static.temp = createArray(12));\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.temp[i_0] = i_0;\n    this$static.edge[i_0] = c.ep[FullEdgeMap[i_0] + 12] % 12;\n  }\n  parity = 1;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    while (this$static.edge[i_0] !== i_0) {\n      t = this$static.edge[i_0];\n      this$static.edge[i_0] = this$static.edge[t];\n      this$static.edge[t] = t;\n      s = this$static.temp[i_0];\n      this$static.temp[i_0] = this$static.temp[t];\n      this$static.temp[t] = s;\n      parity ^= 1;\n    }\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = this$static.temp[c.ep[FullEdgeMap[i_0]] % 12];\n  }\n  return parity;\n}\n\nfunction $std(this$static) {\n  let i_0;\n  this$static.temp === null && (this$static.temp = createArray(12));\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.temp[this$static.edgeo[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = this$static.temp[this$static.edge[i_0]];\n    this$static.edgeo[i_0] = i_0;\n  }\n  this$static.isStd = true;\n}\n\nfunction $swap_0(arr, a, b, c, d) {\n  let temp;\n  temp = arr[a];\n  arr[a] = arr[c];\n  arr[c] = temp;\n  temp = arr[b];\n  arr[b] = arr[d];\n  arr[d] = temp;\n}\n\nfunction $swapx(this$static, x, y) {\n  const temp = this$static.edge[x];\n  this$static.edge[x] = this$static.edgeo[y];\n  this$static.edgeo[y] = temp;\n}\n\nfunction Edge3_0() {\n  this.edge = createArray(12);\n  this.edgeo = createArray(12);\n}\n\nfunction createPrun_0() {\n  let chk;\n  let cord1;\n  let cord1x;\n  let cord2;\n  let cord2x;\n  let dep1m3;\n  let depm3;\n  let depth;\n  let end;\n  let find_0;\n  let i_0;\n  let i_;\n  let idx;\n  let idxx;\n  let inv;\n  let j;\n  let m_0;\n  let symState;\n  let symcord1;\n  let symcord1x;\n  let symx;\n  let val;\n  const e = new Edge3_0();\n  const f = new Edge3_0();\n  const g = new Edge3_0();\n  fill_0(eprun);\n  depth = 0;\n  done_0 = 1;\n  setPruning_0(eprun, 0, 0);\n  // var start = +new Date;\n  while (done_0 !== 31006080) {\n    inv = depth > 9;\n    depm3 = depth % 3;\n    dep1m3 = (depth + 1) % 3;\n    find_0 = inv ? 3 : depm3;\n    chk = inv ? depm3 : 3;\n    if (depth >= 9) {\n      break;\n    }\n    for (i_ = 0; i_ < 31006080; i_ += 16) {\n      val = eprun[~~i_ >> 4];\n      if (!inv && val === -1) {\n        continue;\n      }\n      for (i_0 = i_, end = i_ + 16; i_0 < end; ++i_0, val >>= 2) {\n        if ((val & 3) !== find_0) {\n          continue;\n        }\n        symcord1 = ~~(i_0 / 20160);\n        cord1 = sym2raw_0[symcord1];\n        cord2 = i_0 % 20160;\n        $set_4(e, cord1 * 20160 + cord2);\n        for (m_0 = 0; m_0 < 17; ++m_0) {\n          cord1x = getmvrot(e.edge, m_0 << 3, 4);\n          symcord1x = raw2sym_1[cord1x];\n          symx = symcord1x & 7;\n          symcord1x >>= 3;\n          cord2x = getmvrot(e.edge, (m_0 << 3) | symx, 10) % 20160;\n          idx = symcord1x * 20160 + cord2x;\n          if (getPruning_0(eprun, idx) !== chk) {\n            continue;\n          }\n          setPruning_0(eprun, inv ? i_0 : idx, dep1m3);\n          ++done_0;\n          if (inv) {\n            break;\n          }\n          symState = symstate[symcord1x];\n          if (symState === 1) {\n            continue;\n          }\n          $set_5(f, e);\n          $move_4(f, m_0);\n          $rotate_0(f, symx);\n          for (j = 1; (symState = (~~symState >> 1) & 65535) !== 0; ++j) {\n            if ((symState & 1) !== 1) {\n              continue;\n            }\n            $set_5(g, f);\n            $rotate_0(g, j);\n            idxx = symcord1x * 20160 + ($get_2(g, 10) % 20160);\n            if (getPruning_0(eprun, idxx) === chk) {\n              setPruning_0(eprun, idxx, dep1m3);\n              ++done_0;\n            }\n          }\n        }\n      }\n    }\n    ++depth;\n    // console.log(depth + '\\t' + done_0 + '\\t' + (+new Date - start));\n  }\n}\n\nfunction getPruning_0(table, index) {\n  return (table[index >> 4] >> ((index & 15) << 1)) & 3;\n}\n\nfunction getmvrot(ep, mrIdx, end) {\n  let i_0;\n  let idx;\n  let v;\n  let valh;\n  let vall;\n  const movo = mvroto[mrIdx];\n  const mov = mvrot[mrIdx];\n  idx = 0;\n  vall = 1985229328;\n  valh = 47768;\n  for (i_0 = 0; i_0 < end; ++i_0) {\n    v = movo[ep[mov[i_0]]] << 2;\n    idx *= 12 - i_0;\n    if (v >= 32) {\n      idx += (valh >> (v - 32)) & 15;\n      valh -= 4368 << (v - 32);\n    } else {\n      idx += (vall >> v) & 15;\n      valh -= 4369;\n      vall -= 286331152 << v;\n    }\n  }\n  return idx;\n}\n\nfunction getprun(edge) {\n  let cord1;\n  let cord1x;\n  let cord2;\n  let cord2x;\n  let depm3;\n  let depth;\n  let idx;\n  let m_0;\n  let symcord1;\n  let symcord1x;\n  let symx;\n  const e = new Edge3_0();\n  depth = 0;\n  depm3 = getPruning_0(eprun, edge);\n  if (depm3 === 3) {\n    return 10;\n  }\n  while (edge !== 0) {\n    depm3 === 0 ? (depm3 = 2) : --depm3;\n    symcord1 = ~~(edge / 20160);\n    cord1 = sym2raw_0[symcord1];\n    cord2 = edge % 20160;\n    $set_4(e, cord1 * 20160 + cord2);\n    for (m_0 = 0; m_0 < 17; ++m_0) {\n      cord1x = getmvrot(e.edge, m_0 << 3, 4);\n      symcord1x = raw2sym_1[cord1x];\n      symx = symcord1x & 7;\n      symcord1x >>= 3;\n      cord2x = getmvrot(e.edge, (m_0 << 3) | symx, 10) % 20160;\n      idx = symcord1x * 20160 + cord2x;\n      if (getPruning_0(eprun, idx) === depm3) {\n        ++depth;\n        edge = idx;\n        break;\n      }\n    }\n  }\n  return depth;\n}\n\nfunction getprun_0(edge, prun) {\n  const depm3 = getPruning_0(eprun, edge);\n  if (depm3 === 3) {\n    return 10;\n  }\n  return (((0x49249249 << depm3) >> prun) & 3) + prun - 1;\n  // (depm3 - prun + 16) % 3 + prun - 1;\n}\n\nfunction initMvrot() {\n  let i_0;\n  let m_0;\n  let r;\n  const e = new Edge3_0();\n  for (m_0 = 0; m_0 < 20; ++m_0) {\n    for (r = 0; r < 8; ++r) {\n      $set_4(e, 0);\n      $move_4(e, m_0);\n      $rotate_0(e, r);\n      for (i_0 = 0; i_0 < 12; ++i_0) {\n        mvrot[(m_0 << 3) | r][i_0] = e.edge[i_0];\n      }\n      $std(e);\n      for (i_0 = 0; i_0 < 12; ++i_0) {\n        mvroto[(m_0 << 3) | r][i_0] = e.temp[i_0];\n      }\n    }\n  }\n}\n\nfunction initRaw2Sym() {\n  let count;\n  let i_0;\n  let idx;\n  let j;\n  const e = new Edge3_0();\n  const occ = createArray(1485);\n  for (i_0 = 0; i_0 < 1485; i_0++) {\n    occ[i_0] = 0;\n  }\n  count = 0;\n  for (i_0 = 0; i_0 < 11880; ++i_0) {\n    if ((occ[~~i_0 >>> 3] & (1 << (i_0 & 7))) === 0) {\n      $set_4(e, i_0 * factX[8]);\n      for (j = 0; j < 8; ++j) {\n        idx = $get_2(e, 4);\n        idx === i_0 && (symstate[count] = (symstate[count] | (1 << j)) & 65535);\n        occ[~~idx >> 3] = occ[~~idx >> 3] | (1 << (idx & 7));\n        raw2sym_1[idx] = (count << 3) | syminv_0[j];\n        $rot_1(e, 0);\n        if (j % 2 === 1) {\n          $rot_1(e, 1);\n          $rot_1(e, 2);\n        }\n      }\n      sym2raw_0[count++] = i_0;\n    }\n  }\n}\n\nfunction setPruning_0(table, index, value) {\n  table[index >> 4] ^= (3 ^ value) << ((index & 15) << 1);\n}\n\ndefineSeed(158, 1, makeCastMap([Q$Edge3]), Edge3_0);\n_.isStd = true;\n_.temp = null;\nlet FullEdgeMap;\nlet done_0 = 0;\nlet eprun;\nlet factX;\nlet mvrot;\nlet mvroto;\nlet raw2sym_1;\nlet sym2raw_0;\nlet syminv_0;\nlet symstate;\n\nlet ran$clinit_EdgeCube = false;\nfunction $clinit_EdgeCube() {\n  if (ran$clinit_EdgeCube) {\n    return;\n  }\n  ran$clinit_EdgeCube = true;\n}\n\nfunction $checkEdge(this$static) {\n  let ck;\n  let i_0;\n  let parity;\n  ck = 0;\n  parity = false;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    ck |= 1 << this$static.ep[i_0];\n    parity = parity !== this$static.ep[i_0] >= 12;\n  }\n  ck &= ~~ck >> 12;\n  return ck === 0 && !parity;\n}\n\nfunction $copy_3(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ep[i_0] = c.ep[i_0];\n  }\n}\n\nfunction $move_5(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0: {\n      swap(this$static.ep, 0, 1, 2, 3, key);\n      swap(this$static.ep, 12, 13, 14, 15, key);\n      break;\n    }\n    case 1: {\n      swap(this$static.ep, 11, 15, 10, 19, key);\n      swap(this$static.ep, 23, 3, 22, 7, key);\n      break;\n    }\n    case 2: {\n      swap(this$static.ep, 0, 11, 6, 8, key);\n      swap(this$static.ep, 12, 23, 18, 20, key);\n      break;\n    }\n    case 3: {\n      swap(this$static.ep, 4, 5, 6, 7, key);\n      swap(this$static.ep, 16, 17, 18, 19, key);\n      break;\n    }\n    case 4: {\n      swap(this$static.ep, 1, 20, 5, 21, key);\n      swap(this$static.ep, 13, 8, 17, 9, key);\n      break;\n    }\n    case 5: {\n      swap(this$static.ep, 2, 9, 4, 10, key);\n      swap(this$static.ep, 14, 21, 16, 22, key);\n      break;\n    }\n    case 6: {\n      swap(this$static.ep, 0, 1, 2, 3, key);\n      swap(this$static.ep, 12, 13, 14, 15, key);\n      swap(this$static.ep, 9, 22, 11, 20, key);\n      break;\n    }\n    case 7: {\n      swap(this$static.ep, 11, 15, 10, 19, key);\n      swap(this$static.ep, 23, 3, 22, 7, key);\n      swap(this$static.ep, 2, 16, 6, 12, key);\n      break;\n    }\n    case 8: {\n      swap(this$static.ep, 0, 11, 6, 8, key);\n      swap(this$static.ep, 12, 23, 18, 20, key);\n      swap(this$static.ep, 3, 19, 5, 13, key);\n      break;\n    }\n    case 9: {\n      swap(this$static.ep, 4, 5, 6, 7, key);\n      swap(this$static.ep, 16, 17, 18, 19, key);\n      swap(this$static.ep, 8, 23, 10, 21, key);\n      break;\n    }\n    case 10: {\n      swap(this$static.ep, 1, 20, 5, 21, key);\n      swap(this$static.ep, 13, 8, 17, 9, key);\n      swap(this$static.ep, 14, 0, 18, 4, key);\n      break;\n    }\n    case 11: {\n      swap(this$static.ep, 2, 9, 4, 10, key);\n      swap(this$static.ep, 14, 21, 16, 22, key);\n      swap(this$static.ep, 7, 15, 1, 17, key);\n    }\n  }\n}\n\nfunction EdgeCube_0() {\n  let i_0;\n  this.ep = createArray(24);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ep[i_0] = i_0;\n  }\n}\n\nfunction EdgeCube_1() {\n  let i_0;\n  let m_0;\n  let t;\n  EdgeCube_0.call(this);\n  for (i_0 = 0; i_0 < 23; ++i_0) {\n    t = i_0 + randomUIntBelow(24 - i_0);\n    if (t !== i_0) {\n      m_0 = this.ep[i_0];\n      this.ep[i_0] = this.ep[t];\n      this.ep[t] = m_0;\n    }\n  }\n}\n\ndefineSeed(159, 1, {}, EdgeCube_0, EdgeCube_1);\n\nlet ran$clinit_FullCube_0 = false;\nfunction $clinit_FullCube_0() {\n  if (ran$clinit_FullCube_0) {\n    return;\n  }\n  ran$clinit_FullCube_0 = true;\n  move2rot = [35, 1, 34, 2, 4, 6, 22, 5, 19];\n}\n\nfunction $$init_3(this$static) {\n  this$static.moveBuffer = createArray(60);\n}\n\nfunction $compareTo_1(this$static, c) {\n  return this$static.value - c.value;\n}\n\nfunction $copy_4(this$static, c) {\n  let i_0;\n  $copy_3(this$static.edge, c.edge);\n  $copy_1(this$static.center, c.center);\n  $copy_2(this$static.corner, c.corner);\n  this$static.value = c.value;\n  this$static.add1 = c.add1;\n  this$static.length1 = c.length1;\n  this$static.length2 = c.length2;\n  this$static.length3 = c.length3;\n  this$static.sym = c.sym;\n  for (i_0 = 0; i_0 < 60; ++i_0) {\n    this$static.moveBuffer[i_0] = c.moveBuffer[i_0];\n  }\n  this$static.moveLength = c.moveLength;\n  this$static.edgeAvail = c.edgeAvail;\n  this$static.centerAvail = c.centerAvail;\n  this$static.cornerAvail = c.cornerAvail;\n}\n\nfunction $getCenter(this$static) {\n  while (this$static.centerAvail < this$static.moveLength) {\n    $move_2(\n      this$static.center,\n      this$static.moveBuffer[this$static.centerAvail++],\n    );\n  }\n  return this$static.center;\n}\n\nfunction $getCorner(this$static) {\n  while (this$static.cornerAvail < this$static.moveLength) {\n    $move_3(\n      this$static.corner,\n      this$static.moveBuffer[this$static.cornerAvail++] % 18,\n    );\n  }\n  return this$static.corner;\n}\n\nfunction $getEdge(this$static) {\n  while (this$static.edgeAvail < this$static.moveLength) {\n    $move_5(this$static.edge, this$static.moveBuffer[this$static.edgeAvail++]);\n  }\n  return this$static.edge;\n}\n\nfunction $getMoveString(this$static) {\n  let i_0;\n  let idx;\n  let move;\n  let rot;\n  let sb;\n  let sym;\n  const fixedMoves = new Array(\n    this$static.moveLength - (this$static.add1 ? 2 : 0),\n  );\n  idx = 0;\n  for (i_0 = 0; i_0 < this$static.length1; ++i_0) {\n    fixedMoves[idx++] = this$static.moveBuffer[i_0];\n  }\n  sym = this$static.sym;\n  for (\n    i_0 = this$static.length1 + (this$static.add1 ? 2 : 0);\n    i_0 < this$static.moveLength;\n    ++i_0\n  ) {\n    if (symmove[sym][this$static.moveBuffer[i_0]] >= 27) {\n      fixedMoves[idx++] = symmove[sym][this$static.moveBuffer[i_0]] - 9;\n      rot = move2rot[symmove[sym][this$static.moveBuffer[i_0]] - 27];\n      sym = symmult[sym][rot];\n    } else {\n      fixedMoves[idx++] = symmove[sym][this$static.moveBuffer[i_0]];\n    }\n  }\n  const finishSym = symmult[syminv[sym]][getSolvedSym($getCenter(this$static))];\n  sb = \"\";\n  sym = finishSym;\n  for (i_0 = idx - 1; i_0 >= 0; --i_0) {\n    move = fixedMoves[i_0];\n    move = ~~(move / 3) * 3 + (2 - (move % 3));\n    if (symmove[sym][move] >= 27) {\n      sb = `${sb}${move2str_1[symmove[sym][move] - 9]} `;\n      rot = move2rot[symmove[sym][move] - 27];\n      sym = symmult[sym][rot];\n    } else {\n      sb = `${sb}${move2str_1[symmove[sym][move]]} `;\n    }\n  }\n  return sb;\n}\n\nfunction $move_6(this$static, m_0) {\n  this$static.moveBuffer[this$static.moveLength++] = m_0;\n  return;\n}\n\nfunction FullCube_3() {\n  $$init_3(this);\n  this.edge = new EdgeCube_0();\n  this.center = new CenterCube_0();\n  this.corner = new CornerCube_0();\n}\n\nfunction FullCube_4(c) {\n  FullCube_3.call(this);\n  $copy_4(this, c);\n}\n\nfunction FullCube_5() {\n  $$init_3(this);\n  this.edge = new EdgeCube_1();\n  this.center = new CenterCube_1();\n  this.corner = new CornerCube_2();\n}\n\ndefineSeed(\n  160,\n  1,\n  makeCastMap([Q$FullCube_0, Q$Comparable]),\n  FullCube_3,\n  FullCube_4,\n  FullCube_5,\n);\n_.compareTo$ = function compareTo_1(c) {\n  return $compareTo_1(this, c);\n};\n_.add1 = false;\n_.center = null;\n_.centerAvail = 0;\n_.corner = null;\n_.cornerAvail = 0;\n_.edge = null;\n_.edgeAvail = 0;\n_.length1 = 0;\n_.length2 = 0;\n_.length3 = 0;\n_.moveLength = 0;\n_.sym = 0;\n_.value = 0;\nlet move2rot;\n\nfunction $compare(c1, c2) {\n  return c2.value - c1.value;\n}\n\nfunction $compare_0(c1, c2) {\n  return $compare(c1, c2);\n}\n\nfunction FullCube$ValueComparator_0() {}\n\ndefineSeed(161, 1, {}, FullCube$ValueComparator_0);\n_.compare = function compare(c1, c2) {\n  return $compare_0(c1, c2);\n};\n\nlet ran$clinit_Moves = false;\nfunction $clinit_Moves() {\n  if (ran$clinit_Moves) {\n    return;\n  }\n  ran$clinit_Moves = true;\n  let i_0;\n  let j;\n  move2str_1 = [\n    \"U  \",\n    \"U2 \",\n    \"U' \",\n    \"R  \",\n    \"R2 \",\n    \"R' \",\n    \"F  \",\n    \"F2 \",\n    \"F' \",\n    \"D  \",\n    \"D2 \",\n    \"D' \",\n    \"L  \",\n    \"L2 \",\n    \"L' \",\n    \"B  \",\n    \"B2 \",\n    \"B' \",\n    \"Uw \",\n    \"Uw2\",\n    \"Uw'\",\n    \"Rw \",\n    \"Rw2\",\n    \"Rw'\",\n    \"Fw \",\n    \"Fw2\",\n    \"Fw'\",\n    \"Dw \",\n    \"Dw2\",\n    \"Dw'\",\n    \"Lw \",\n    \"Lw2\",\n    \"Lw'\",\n    \"Bw \",\n    \"Bw2\",\n    \"Bw'\",\n  ];\n  move2std = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22,\n    23, 25, 28, 30, 31, 32, 34, 36,\n  ];\n  move3std = [\n    0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 19, 22, 25, 28, 31, 34, 36,\n  ];\n  std2move = createArray(37);\n  std3move = createArray(37);\n  ckmv = createArray(37, 36);\n  ckmv2_0 = createArray(29, 28);\n  ckmv3 = createArray(21, 20);\n  skipAxis = createArray(36);\n  skipAxis2 = createArray(28);\n  skipAxis3 = createArray(20);\n  for (i_0 = 0; i_0 < 29; ++i_0) {\n    std2move[move2std[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 21; ++i_0) {\n    std3move[move3std[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 36; ++i_0) {\n    for (j = 0; j < 36; ++j) {\n      ckmv[i_0][j] =\n        ~~(i_0 / 3) === ~~(j / 3) ||\n        (~~(i_0 / 3) % 3 === ~~(j / 3) % 3 && i_0 > j);\n    }\n    ckmv[36][i_0] = false;\n  }\n  for (i_0 = 0; i_0 < 29; ++i_0) {\n    for (j = 0; j < 28; ++j) {\n      ckmv2_0[i_0][j] = ckmv[move2std[i_0]][move2std[j]];\n    }\n  }\n  for (i_0 = 0; i_0 < 21; ++i_0) {\n    for (j = 0; j < 20; ++j) {\n      ckmv3[i_0][j] = ckmv[move3std[i_0]][move3std[j]];\n    }\n  }\n  for (i_0 = 0; i_0 < 36; ++i_0) {\n    skipAxis[i_0] = 36;\n    for (j = i_0; j < 36; ++j) {\n      if (!ckmv[i_0][j]) {\n        skipAxis[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n  for (i_0 = 0; i_0 < 28; ++i_0) {\n    skipAxis2[i_0] = 28;\n    for (j = i_0; j < 28; ++j) {\n      if (!ckmv2_0[i_0][j]) {\n        skipAxis2[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n  for (i_0 = 0; i_0 < 20; ++i_0) {\n    skipAxis3[i_0] = 20;\n    for (j = i_0; j < 20; ++j) {\n      if (!ckmv3[i_0][j]) {\n        skipAxis3[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n}\n\nlet ckmv;\nlet ckmv2_0;\nlet ckmv3;\nlet move2std;\nlet move2str_1;\nlet move3std;\nlet skipAxis;\nlet skipAxis2;\nlet skipAxis3;\nlet std2move;\nlet std3move;\n\nfunction $doSearch(this$static) {\n  let MAX_LENGTH2;\n  let MAX_LENGTH3;\n  let ct;\n  let edge;\n  let eparity;\n  let i_0;\n  let index;\n  let length12;\n  let length123;\n  let prun;\n  let s2ct;\n  let s2rl;\n  this$static.solution = \"\";\n  const ud = $getsym(new Center1_1($getCenter(this$static.c), 0));\n  const fb = $getsym(new Center1_1($getCenter(this$static.c), 1));\n  const rl = $getsym(new Center1_1($getCenter(this$static.c), 2));\n  const udprun = csprun[~~ud >> 6];\n  const fbprun = csprun[~~fb >> 6];\n  const rlprun = csprun[~~rl >> 6];\n  this$static.p1SolsCnt = 0;\n  this$static.arr2idx = 0;\n  $clear(this$static.p1sols.heap);\n  for (\n    this$static.length1 =\n      (udprun < fbprun ? udprun : fbprun) < rlprun\n        ? udprun < fbprun\n          ? udprun\n          : fbprun\n        : rlprun;\n    this$static.length1 < 100;\n    ++this$static.length1\n  ) {\n    if (\n      (rlprun <= this$static.length1 &&\n        $search1(\n          this$static,\n          ~~rl >>> 6,\n          rl & 63,\n          this$static.length1,\n          -1,\n          0,\n        )) ||\n      (udprun <= this$static.length1 &&\n        $search1(\n          this$static,\n          ~~ud >>> 6,\n          ud & 63,\n          this$static.length1,\n          -1,\n          0,\n        )) ||\n      (fbprun <= this$static.length1 &&\n        $search1(this$static, ~~fb >>> 6, fb & 63, this$static.length1, -1, 0))\n    ) {\n      break;\n    }\n  }\n  const p1SolsArr = $toArray_1(\n    this$static.p1sols,\n    initDim(\n      _3Lcs_threephase_FullCube_2_classLit,\n      makeCastMap([Q$FullCube_$1, Q$Serializable, Q$Object_$1]),\n      Q$FullCube_0,\n      0,\n      0,\n    ),\n  );\n\n  p1SolsArr.sort(function (a, b) {\n    return a.value - b.value;\n  });\n  MAX_LENGTH2 = 9;\n  do {\n    OUT: for (length12 = p1SolsArr[0].value; length12 < 100; ++length12) {\n      for (i_0 = 0; i_0 < p1SolsArr.length; ++i_0) {\n        if (p1SolsArr[i_0].value > length12) {\n          break;\n        }\n        if (length12 - p1SolsArr[i_0].length1 > MAX_LENGTH2) {\n          continue;\n        }\n        $copy_4(this$static.c1, p1SolsArr[i_0]);\n        $set_2(\n          this$static.ct2,\n          $getCenter(this$static.c1),\n          parity_0($getEdge(this$static.c1).ep),\n        );\n        s2ct = $getct(this$static.ct2);\n        s2rl = $getrl(this$static.ct2);\n        this$static.length1 = p1SolsArr[i_0].length1;\n        this$static.length2 = length12 - p1SolsArr[i_0].length1;\n        if ($search2(this$static, s2ct, s2rl, this$static.length2, 28, 0)) {\n          break OUT;\n        }\n      }\n    }\n    ++MAX_LENGTH2;\n  } while (length12 === 100);\n  this$static.arr2.sort(function (a, b) {\n    return a.value - b.value;\n  });\n  index = 0;\n  MAX_LENGTH3 = 13;\n  do {\n    OUT2: for (\n      length123 = this$static.arr2[0].value;\n      length123 < 100;\n      ++length123\n    ) {\n      for (i_0 = 0; i_0 < Math.min(this$static.arr2idx, 100); ++i_0) {\n        if (this$static.arr2[i_0].value > length123) {\n          break;\n        }\n        if (\n          length123 -\n            this$static.arr2[i_0].length1 -\n            this$static.arr2[i_0].length2 >\n          MAX_LENGTH3\n        ) {\n          continue;\n        }\n        eparity = $set_6(this$static.e12, $getEdge(this$static.arr2[i_0]));\n        $set_3(\n          this$static.ct3,\n          $getCenter(this$static.arr2[i_0]),\n          eparity ^ parity_0($getCorner(this$static.arr2[i_0]).cp),\n        );\n        ct = $getct_0(this$static.ct3);\n        edge = $get_2(this$static.e12, 10);\n        prun = getprun($getsym_0(this$static.e12));\n        if (\n          prun <=\n            length123 -\n              this$static.arr2[i_0].length1 -\n              this$static.arr2[i_0].length2 &&\n          $search3(\n            this$static,\n            edge,\n            ct,\n            prun,\n            length123 -\n              this$static.arr2[i_0].length1 -\n              this$static.arr2[i_0].length2,\n            20,\n            0,\n          )\n        ) {\n          index = i_0;\n          break OUT2;\n        }\n      }\n    }\n    ++MAX_LENGTH3;\n  } while (length123 === 100);\n  const solcube = new FullCube_4(this$static.arr2[index]);\n  this$static.length1 = solcube.length1;\n  this$static.length2 = solcube.length2;\n  const length_0 = length123 - this$static.length1 - this$static.length2;\n  for (i_0 = 0; i_0 < length_0; ++i_0) {\n    $move_6(solcube, move3std[this$static.move3[i_0]]);\n  }\n  this$static.solution = $getMoveString(solcube);\n}\n\nfunction $init2_0(this$static, sym) {\n  let i_0;\n  let next;\n  $copy_4(this$static.c1, this$static.c);\n  for (i_0 = 0; i_0 < this$static.length1; ++i_0) {\n    $move_6(this$static.c1, this$static.move1[i_0]);\n  }\n  switch (finish_0[sym]) {\n    case 0: {\n      $move_6(this$static.c1, 24);\n      $move_6(this$static.c1, 35);\n      this$static.move1[this$static.length1] = 24;\n      this$static.move1[this$static.length1 + 1] = 35;\n      this$static.add1 = true;\n      sym = 19;\n      break;\n    }\n    case 12869: {\n      $move_6(this$static.c1, 18);\n      $move_6(this$static.c1, 29);\n      this$static.move1[this$static.length1] = 18;\n      this$static.move1[this$static.length1 + 1] = 29;\n      this$static.add1 = true;\n      sym = 34;\n      break;\n    }\n    case 735470: {\n      this$static.add1 = false;\n      sym = 0;\n    }\n  }\n  $set_2(\n    this$static.ct2,\n    $getCenter(this$static.c1),\n    parity_0($getEdge(this$static.c1).ep),\n  );\n  const s2ct = $getct(this$static.ct2);\n  const s2rl = $getrl(this$static.ct2);\n  const ctp = ctprun[s2ct * 70 + s2rl];\n  this$static.c1.value = ctp + this$static.length1;\n  this$static.c1.length1 = this$static.length1;\n  this$static.c1.add1 = this$static.add1;\n  this$static.c1.sym = sym;\n  ++this$static.p1SolsCnt;\n  if (this$static.p1sols.heap.size < 500) {\n    next = new FullCube_4(this$static.c1);\n  } else {\n    next = $poll(this$static.p1sols);\n    next.value > this$static.c1.value && $copy_4(next, this$static.c1);\n  }\n  $add(this$static.p1sols, next);\n  return this$static.p1SolsCnt === 10000;\n}\n\nfunction $init3(this$static) {\n  let i_0;\n  $copy_4(this$static.c2, this$static.c1);\n  for (i_0 = 0; i_0 < this$static.length2; ++i_0) {\n    $move_6(this$static.c2, this$static.move2[i_0]);\n  }\n  if (!$checkEdge($getEdge(this$static.c2))) {\n    return false;\n  }\n  const eparity = $set_6(this$static.e12, $getEdge(this$static.c2));\n  $set_3(\n    this$static.ct3,\n    $getCenter(this$static.c2),\n    eparity ^ parity_0($getCorner(this$static.c2).cp),\n  );\n  const ct = $getct_0(this$static.ct3);\n  $get_2(this$static.e12, 10);\n  const prun = getprun($getsym_0(this$static.e12));\n  !this$static.arr2[this$static.arr2idx]\n    ? (this$static.arr2[this$static.arr2idx] = new FullCube_4(this$static.c2))\n    : $copy_4(this$static.arr2[this$static.arr2idx], this$static.c2);\n  this$static.arr2[this$static.arr2idx].value =\n    this$static.length1 + this$static.length2 + Math.max(prun, prun_0[ct]);\n  this$static.arr2[this$static.arr2idx].length2 = this$static.length2;\n  ++this$static.arr2idx;\n  return this$static.arr2idx === this$static.arr2.length;\n}\n\nfunction $randomState(this$static) {\n  init_5();\n  this$static.c = new FullCube_5();\n  $doSearch(this$static);\n  return this$static.solution;\n}\n\nfunction $search1(this$static, ct, sym, maxl, lm, depth) {\n  let axis;\n  let ctx;\n  let m_0;\n  let power;\n  let prun;\n  let symx;\n  if (ct === 0) {\n    return maxl === 0 && $init2_0(this$static, sym);\n  }\n  for (axis = 0; axis < 27; axis += 3) {\n    if (axis === lm || axis === lm - 9 || axis === lm - 18) {\n      continue;\n    }\n    for (power = 0; power < 3; ++power) {\n      m_0 = axis + power;\n      ctx = ctsmv[ct][symmove[sym][m_0]];\n      prun = csprun[~~ctx >>> 6];\n      if (prun >= maxl) {\n        if (prun > maxl) {\n          break;\n        }\n        continue;\n      }\n      symx = symmult[sym][ctx & 63];\n      ctx >>>= 6;\n      this$static.move1[depth] = m_0;\n      if ($search1(this$static, ctx, symx, maxl - 1, axis, depth + 1)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction $search2(this$static, ct, rl, maxl, lm, depth) {\n  let ctx;\n  let m_0;\n  let prun;\n  let rlx;\n  if (ct === 0 && ctprun[rl] === 0) {\n    return maxl === 0 && $init3(this$static);\n  }\n  for (m_0 = 0; m_0 < 23; ++m_0) {\n    if (ckmv2_0[lm][m_0]) {\n      m_0 = skipAxis2[m_0];\n      continue;\n    }\n    ctx = ctmv[ct][m_0];\n    rlx = rlmv[rl][m_0];\n    prun = ctprun[ctx * 70 + rlx];\n    if (prun >= maxl) {\n      prun > maxl && (m_0 = skipAxis2[m_0]);\n      continue;\n    }\n    this$static.move2[depth] = move2std[m_0];\n    if ($search2(this$static, ctx, rlx, maxl - 1, m_0, depth + 1)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction $search3(this$static, edge, ct, prun, maxl, lm, depth) {\n  let cord1x;\n  let cord2x;\n  let ctx;\n  let edgex;\n  let m_0;\n  let prun1;\n  let prunx;\n  let symcord1x;\n  let symx;\n  if (maxl === 0) {\n    return edge === 0 && ct === 0;\n  }\n  $set_4(this$static.tempe[depth], edge);\n  for (m_0 = 0; m_0 < 17; ++m_0) {\n    if (ckmv3[lm][m_0]) {\n      m_0 = skipAxis3[m_0];\n      continue;\n    }\n    ctx = ctmove[ct][m_0];\n    prun1 = prun_0[ctx];\n    if (prun1 >= maxl) {\n      prun1 > maxl && m_0 < 14 && (m_0 = skipAxis3[m_0]);\n      continue;\n    }\n    edgex = getmvrot(this$static.tempe[depth].edge, m_0 << 3, 10);\n    cord1x = ~~(edgex / 20160);\n    symcord1x = raw2sym_1[cord1x];\n    symx = symcord1x & 7;\n    symcord1x >>= 3;\n    cord2x =\n      getmvrot(this$static.tempe[depth].edge, (m_0 << 3) | symx, 10) % 20160;\n    prunx = getprun_0(symcord1x * 20160 + cord2x, prun);\n    if (prunx >= maxl) {\n      prunx > maxl && m_0 < 14 && (m_0 = skipAxis3[m_0]);\n      continue;\n    }\n    if ($search3(this$static, edgex, ctx, prunx, maxl - 1, m_0, depth + 1)) {\n      this$static.move3[depth] = m_0;\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction Search_4() {\n  let i_0;\n  this.p1sols = new PriorityQueue_0(new FullCube$ValueComparator_0());\n  this.move1 = createArray(15);\n  this.move2 = createArray(20);\n  this.move3 = createArray(20);\n  this.c1 = new FullCube_3();\n  this.c2 = new FullCube_3();\n  this.ct2 = new Center2_0();\n  this.ct3 = new Center3_0();\n  this.e12 = new Edge3_0();\n  this.tempe = createArray(20);\n  this.arr2 = createArray(100);\n  for (i_0 = 0; i_0 < 20; ++i_0) {\n    this.tempe[i_0] = new Edge3_0();\n  }\n}\n\nfunction init_5() {\n  if (inited_2) {\n    return;\n  }\n  initSym_0();\n  raw2sym = createArray(735471);\n  initSym2Raw();\n  createMoveTable();\n  raw2sym = null;\n  createPrun();\n  init_3();\n  init_4();\n  initMvrot();\n  initRaw2Sym();\n  createPrun_0();\n  inited_2 = true;\n}\n\ndefineSeed(163, 1, makeCastMap([Q$Search_0]), Search_4);\n_.add1 = false;\n_.arr2idx = 0;\n_.c = null;\n_.length1 = 0;\n_.length2 = 0;\n_.p1SolsCnt = 0;\n_.solution = \"\";\nlet inited_2 = false;\n\nlet ran$clinit_Util_0 = false;\nfunction $clinit_Util_0() {\n  if (ran$clinit_Util_0) {\n    return;\n  }\n  ran$clinit_Util_0 = true;\n}\n\nfunction parity_0(arr) {\n  let i_0;\n  let j;\n  let len;\n  let parity;\n  parity = 0;\n  for (i_0 = 0, len = arr.length; i_0 < len; ++i_0) {\n    for (j = i_0; j < len; ++j) {\n      arr[i_0] > arr[j] && (parity ^= 1);\n    }\n  }\n  return parity;\n}\n\nfunction swap(arr, a, b, c, d, key) {\n  let temp;\n  switch (key) {\n    case 0: {\n      temp = arr[d];\n      arr[d] = arr[c];\n      arr[c] = arr[b];\n      arr[b] = arr[a];\n      arr[a] = temp;\n      return;\n    }\n    case 1: {\n      temp = arr[a];\n      arr[a] = arr[c];\n      arr[c] = temp;\n      temp = arr[b];\n      arr[b] = arr[d];\n      arr[d] = temp;\n      return;\n    }\n    case 2: {\n      temp = arr[a];\n      arr[a] = arr[b];\n      arr[b] = arr[c];\n      arr[c] = arr[d];\n      arr[d] = temp;\n      return;\n    }\n  }\n}\n\nfunction Class_0() {}\n\nfunction createForArray(packageName, className, seedId, componentType) {\n  const clazz = new Class_0();\n  clazz.typeName = packageName + className;\n  isInstantiable(seedId !== 0 ? -seedId : 0) &&\n    setClassLiteral(seedId !== 0 ? -seedId : 0, clazz);\n  clazz.modifiers = 4;\n  clazz.superclass = Ljava_lang_Object_2_classLit;\n  clazz.componentType = componentType;\n  return clazz;\n}\n\nfunction createForClass(packageName, className, seedId, superclass) {\n  const clazz = new Class_0();\n  clazz.typeName = packageName + className;\n  isInstantiable(seedId) && setClassLiteral(seedId, clazz);\n  clazz.superclass = superclass;\n  return clazz;\n}\n\nfunction getSeedFunction(clazz) {\n  const func = seedTable[clazz.seedId];\n  clazz = null;\n  return func;\n}\n\nfunction isInstantiable(seedId) {\n  return typeof seedId === \"number\" && seedId > 0;\n}\n\nfunction setClassLiteral(seedId, clazz) {\n  let proto;\n  clazz.seedId = seedId;\n  if (seedId === 2) {\n    proto = String.prototype;\n  } else {\n    if (seedId > 0) {\n      let seed = getSeedFunction(clazz);\n      if (seed) {\n        proto = seed.prototype;\n      } else {\n        seed = seedTable[seedId] = function () {};\n        seed.___clazz$ = clazz;\n        return;\n      }\n    } else {\n      return;\n    }\n  }\n  proto.___clazz$ = clazz;\n}\n\n_.val$outerIter = null;\n\nfunction $add(this$static, o) {\n  if ($offer(this$static, o)) {\n    return true;\n  }\n}\n\nfunction $$init_6(this$static) {\n  this$static.array = initDim(\n    _3Ljava_lang_Object_2_classLit,\n    makeCastMap([Q$Serializable, Q$Object_$1]),\n    Q$Object,\n    0,\n    0,\n  );\n}\n\nfunction $add_0(this$static, o) {\n  setCheck(this$static.array, this$static.size++, o);\n  return true;\n}\n\nfunction $clear(this$static) {\n  this$static.array = initDim(\n    _3Ljava_lang_Object_2_classLit,\n    makeCastMap([Q$Serializable, Q$Object_$1]),\n    Q$Object,\n    0,\n    0,\n  );\n  this$static.size = 0;\n}\n\nfunction $get_4(this$static, index) {\n  return this$static.array[index];\n}\n\nfunction $remove_0(this$static, index) {\n  const previous = this$static.array[index];\n  splice_0(this$static.array, index, 1);\n  --this$static.size;\n  return previous;\n}\n\nfunction $set_7(this$static, index, o) {\n  const previous = this$static.array[index];\n  setCheck(this$static.array, index, o);\n  return previous;\n}\n\nfunction $toArray_0(this$static, out) {\n  let i_0;\n  out.length < this$static.size && (out = createFrom(out, this$static.size));\n  for (i_0 = 0; i_0 < this$static.size; ++i_0) {\n    setCheck(out, i_0, this$static.array[i_0]);\n  }\n  out.length > this$static.size && setCheck(out, this$static.size, null);\n  return out;\n}\n\nfunction ArrayList_1() {\n  $$init_6(this);\n  this.array.length = 500;\n}\n\nfunction splice_0(array, index, deleteCount) {\n  array.splice(index, deleteCount);\n}\n_.size = 0;\n\nfunction binarySearch_0(sortedArray, key) {\n  let high;\n  let low;\n  let mid;\n  let midVal;\n  low = 0;\n  high = sortedArray.length - 1;\n  while (low <= high) {\n    mid = low + (~~(high - low) >> 1);\n    midVal = sortedArray[mid];\n    if (midVal < key) {\n      low = mid + 1;\n    } else if (midVal > key) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -low - 1;\n}\n\nfunction fill_0(a) {\n  fill_1(a, a.length);\n}\n\nfunction fill_1(a, toIndex) {\n  let i_0;\n  for (i_0 = 0; i_0 < toIndex; ++i_0) {\n    a[i_0] = -1;\n  }\n}\n\nfunction $mergeHeaps(this$static, node) {\n  let smallestChild;\n  let leftChild;\n  let rightChild;\n  let smallestChild_0;\n  const heapSize = this$static.heap.size;\n  const value = $get_4(this$static.heap, node);\n  while (node * 2 + 1 < heapSize) {\n    smallestChild =\n      ((leftChild = 2 * node + 1),\n      (rightChild = leftChild + 1),\n      (smallestChild_0 = leftChild),\n      rightChild < heapSize &&\n        $compare_0(\n          $get_4(this$static.heap, rightChild),\n          $get_4(this$static.heap, leftChild),\n        ) < 0 &&\n        (smallestChild_0 = rightChild),\n      smallestChild_0);\n    if ($compare_0(value, $get_4(this$static.heap, smallestChild)) < 0) {\n      break;\n    }\n    $set_7(this$static.heap, node, $get_4(this$static.heap, smallestChild));\n    node = smallestChild;\n  }\n  $set_7(this$static.heap, node, value);\n}\n\nfunction $offer(this$static, e) {\n  let childNode;\n  let node;\n  node = this$static.heap.size;\n  $add_0(this$static.heap, e);\n  while (node > 0) {\n    childNode = node;\n    node = ~~((node - 1) / 2);\n    if ($compare_0($get_4(this$static.heap, node), e) <= 0) {\n      $set_7(this$static.heap, childNode, e);\n      return true;\n    }\n    $set_7(this$static.heap, childNode, $get_4(this$static.heap, node));\n  }\n  $set_7(this$static.heap, node, e);\n  return true;\n}\n\nfunction $poll(this$static) {\n  if (this$static.heap.size === 0) {\n    return null;\n  }\n  const value = $get_4(this$static.heap, 0);\n  $removeAtIndex(this$static);\n  return value;\n}\n\nfunction $removeAtIndex(this$static) {\n  const lastValue = $remove_0(this$static.heap, this$static.heap.size - 1);\n  if (0 < this$static.heap.size) {\n    $set_7(this$static.heap, 0, lastValue);\n    $mergeHeaps(this$static, 0);\n  }\n}\n\nfunction $toArray_1(this$static, a) {\n  return $toArray_0(this$static.heap, a);\n}\n\nfunction PriorityQueue_0(cmp) {\n  this.heap = new ArrayList_1();\n  this.cmp = cmp;\n}\n\ndefineSeed(239, 1, {}, PriorityQueue_0);\n_.cmp = null;\n_.heap = null;\n\nconst Ljava_lang_Object_2_classLit = createForClass(\n  \"java.lang.\",\n  \"Object\",\n  1,\n  null,\n);\nconst _3Ljava_lang_Object_2_classLit = createForArray(\n  \"[Ljava.lang.\",\n  \"Object;\",\n  356,\n  Ljava_lang_Object_2_classLit,\n);\nconst Lcs_threephase_FullCube_2_classLit = createForClass(\n  \"cs.threephase.\",\n  \"FullCube\",\n  160,\n  Ljava_lang_Object_2_classLit,\n);\nconst _3Lcs_threephase_FullCube_2_classLit = createForArray(\n  \"[Lcs.threephase.\",\n  \"FullCube;\",\n  381,\n  Lcs_threephase_FullCube_2_classLit,\n);\n\nlet searcher;\n\nlet raninit = false;\nfunction init() {\n  if (raninit) {\n    return;\n  }\n  raninit = true;\n  $clinit_Moves();\n  $clinit_Util_0();\n  $clinit_Center1();\n  $clinit_Center2();\n  $clinit_Center3();\n  $clinit_Edge3();\n  $clinit_CornerCube();\n  $clinit_EdgeCube();\n  $clinit_FullCube_0();\n  searcher = new Search_4();\n}\n\nexport function initialize(): void {\n  init();\n  init_5();\n}\n\nexport async function random444Scramble(): Promise<Alg> {\n  init();\n  const suffix = Alg.fromString($randomState(searcher));\n  return (await rawRandom333Scramble()).concat(suffix);\n}\n","const Cnk: number[][] = [];\nconst fact = [1];\nfor (let i = 0; i < 32; ++i) {\n  Cnk[i] = [];\n  for (let j = 0; j < 32; ++j) {\n    Cnk[i][j] = 0;\n  }\n}\nfor (let i = 0; i < 32; ++i) {\n  Cnk[i][0] = Cnk[i][i] = 1;\n  fact[i + 1] = fact[i] * (i + 1);\n  for (let j = 1; j < i; ++j) {\n    Cnk[i][j] = Cnk[i - 1][j - 1] + Cnk[i - 1][j];\n  }\n}\n\nfunction circle(arr: number[], ...moreArgs: number[]) {\n  const length = moreArgs.length;\n  const temp = arr[moreArgs[length - 1]];\n  for (let i = length; i > 0; i--) {\n    arr[moreArgs[i]] = arr[moreArgs[i - 1]];\n  }\n  arr[moreArgs[0]] = temp;\n  return circle;\n}\n\nfunction set8Perm(arr: number[], idx: number, n?: number, even?: number) {\n  n = (n || 8) - 1;\n  let val = 0x76543210;\n  let prt = 0;\n  even ??= 0;\n  if (even < 0) {\n    idx <<= 1;\n  }\n  for (let i = 0; i < n; ++i) {\n    const p = fact[n - i];\n    let v = ~~(idx / p);\n    prt ^= v;\n    idx %= p;\n    v <<= 2;\n    arr[i] = (val >> v) & 7;\n    const m = (1 << v) - 1;\n    val = (val & m) + ((val >> 4) & ~m);\n  }\n  if (even < 0 && (prt & 1) !== 0) {\n    arr[n] = arr[n - 1];\n    arr[n - 1] = val & 7;\n  } else {\n    arr[n] = val & 7;\n  }\n  return arr;\n}\n\nexport { Cnk, set8Perm, circle };\n","import { randomUIntBelow } from \"random-uint-below\";\n\nconst backMoves = [\"U\", \"R\", \"D\", \"L\", \"ALL\"];\nconst frontMoves = [\"UR\", \"DR\", \"DL\", \"UL\"].concat(backMoves);\n\nexport function randomClockScrambleString(): string {\n  let filteringMoveCount = 0;\n\n  function randomSuffix() {\n    const amount = randomUIntBelow(12);\n    if (amount !== 0) {\n      filteringMoveCount++;\n    }\n    if (amount <= 6) {\n      return `${amount}+`;\n    } else {\n      return `${12 - amount}-`;\n    }\n  }\n\n  const moves = [];\n  function side(families: string[]): void {\n    for (const family of families) {\n      moves.push(`${family}${randomSuffix()}`);\n    }\n  }\n\n  side(frontMoves);\n  moves.push(\"y2\");\n  side(backMoves);\n\n  // https://www.worldcubeassociation.org/regulations/#4b3\n  if (filteringMoveCount < 2) {\n    return randomClockScrambleString();\n  }\n\n  return moves.join(\" \");\n}\n","import nodeEndpoint from \"../node-adapter\";\n\nexport { wrap } from \"comlink\";\n\nconst useNodeWorkarounds =\n  typeof globalThis.Worker === \"undefined\" &&\n  typeof (globalThis as any).WorkerNavigator === \"undefined\";\n\nasync function nodeWorker(\n  source: string | URL,\n  options?: { eval?: boolean },\n): Promise<Worker> {\n  const { Worker: NodeWorker } = globalThis.process.getBuiltinModule(\n    \"node:worker_threads\",\n  );\n  const worker = new NodeWorker(source, options);\n  worker.unref();\n  return nodeEndpoint(worker);\n}\n\nexport async function constructWorker(\n  source: string | URL,\n  options?: { type?: WorkerType },\n): Promise<Worker> {\n  let worker: Worker;\n  if (useNodeWorkarounds) {\n    return nodeWorker(source);\n  } else {\n    worker = new globalThis.Worker(source, {\n      type: options ? options.type : undefined, // TODO: Is it safe to use `options?.type`?\n    });\n  }\n  return worker;\n}\n","import {\n  constructWorker,\n  wrap,\n} from \"../vendor/apache/comlink-everywhere/outside\";\nimport type { WorkerInsideAPI } from \"./inside/api\";\nimport { searchOutsideDebugGlobals } from \"./outside\";\nimport {\n  instantiateSearchWorkerURLNewURLImportMetaURL,\n  searchWorkerURLEsbuildWorkaround,\n  searchWorkerURLImportMetaResolve,\n  searchWorkerURLNewURLImportMetaURL,\n} from \"./worker-workarounds\";\n\nexport interface WorkerOutsideAPI {\n  terminate: () => void; // `node` can return a `Promise` with an exit code, but we match the web worker API.\n}\nexport interface InsideOutsideAPI {\n  insideAPI: WorkerInsideAPI;\n  outsideAPI: WorkerOutsideAPI;\n}\n\nfunction probablyCrossOrigin(workerEntryFileURL: URL): boolean {\n  try {\n    const scriptOrigin = globalThis.location?.origin;\n    const workerOrigin = workerEntryFileURL.origin;\n    return !!scriptOrigin && !!workerOrigin && scriptOrigin !== workerOrigin;\n  } catch {\n    return false;\n  }\n}\n\nasync function instantiateModuleWorker(\n  workerEntryFileURL: string | URL,\n): Promise<InsideOutsideAPI> {\n  // We need the `import.meta.url` base for `bun`.\n  const url = new URL(workerEntryFileURL, import.meta.url);\n  const tryTrampolineFirst = probablyCrossOrigin(url);\n  try {\n    return instantiateModuleWorkerAttempt(url, tryTrampolineFirst);\n  } catch {\n    return instantiateModuleWorkerAttempt(url, !tryTrampolineFirst);\n  }\n}\n\ninterface BunWorker extends Worker {\n  unref?: () => void;\n}\n\nasync function instantiateModuleWorkerAttempt(\n  workerEntryFileURL: URL,\n  crossOriginTrampoline: boolean,\n): Promise<InsideOutsideAPI> {\n  // biome-ignore lint/suspicious/noAsyncPromiseExecutor: TODO\n  return new Promise<InsideOutsideAPI>(async (resolve, reject) => {\n    try {\n      if (!workerEntryFileURL) {\n        reject(new Error(\"Could not get worker entry file URL.\"));\n      }\n      let url: URL = workerEntryFileURL;\n      if (crossOriginTrampoline) {\n        // Standard browser-like environment.\n        const importSrc = `import ${JSON.stringify(\n          workerEntryFileURL.toString(),\n        )};`;\n        const blob = new Blob([importSrc], {\n          type: \"text/javascript\",\n        });\n        url = new URL(URL.createObjectURL(blob));\n      }\n\n      const worker = (await constructWorker(url, {\n        type: \"module\",\n      })) as Worker & {\n        nodeWorker?: import(\"worker_threads\").Worker;\n      } & BunWorker;\n\n      worker.unref?.(); // Unref in `bun`.\n\n      const onError = (e: ErrorEvent) => {\n        reject(e);\n      };\n\n      // TODO: Remove this once we can remove the workarounds for lack of `import.meta.resolve(…)` support.\n      const onFirstMessage = (messageData: string) => {\n        if (messageData === \"comlink-exposed\") {\n          // We need to clear the timeout so that we don't prevent `node` from exiting in the meantime.\n          resolve(wrapWithTerminate(worker));\n        } else {\n          reject(\n            new Error(`wrong module instantiation message ${messageData}`),\n          );\n        }\n      };\n\n      if (worker.nodeWorker) {\n        // We have to use `once` so the `unref()` from `comlink-everywhere` allows the process to quit as expected.\n        worker.nodeWorker.once(\"message\", onFirstMessage);\n      } else {\n        worker.addEventListener(\"error\", onError, {\n          once: true,\n        });\n        worker.addEventListener(\"message\", (e) => onFirstMessage(e.data), {\n          once: true,\n        });\n      }\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n// Maybe some day if we work really hard, this code path can work:\n// - in `node` (https://github.com/nodejs/node/issues/43583#issuecomment-1540025755)\n// - for CDNs (https://github.com/tc39/proposal-module-expressions or https://github.com/whatwg/html/issues/6911)\nexport async function instantiateModuleWorkerDirectlyForBrowser(): Promise<InsideOutsideAPI> {\n  // biome-ignore lint/suspicious/noAsyncPromiseExecutor: TODO\n  return new Promise<InsideOutsideAPI>(async (resolve, reject) => {\n    try {\n      const worker = instantiateSearchWorkerURLNewURLImportMetaURL();\n\n      const onError = (e: ErrorEvent) => {\n        reject(e);\n      };\n\n      // TODO: Remove this once we can remove the workarounds for lack of `import.meta.resolve(…)` support.\n      const onFirstMessage = (messageData: string) => {\n        if (messageData === \"comlink-exposed\") {\n          // We need to clear the timeout so that we don't prevent `node` from exiting in the meantime.\n          resolve(wrapWithTerminate(worker));\n        } else {\n          reject(\n            new Error(`wrong module instantiation message ${messageData}`),\n          );\n        }\n      };\n\n      worker.addEventListener(\"error\", onError, {\n        once: true,\n      });\n      worker.addEventListener(\"message\", (e) => onFirstMessage(e.data), {\n        once: true,\n      });\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nfunction wrapWithTerminate(worker: Worker): InsideOutsideAPI {\n  const insideAPI = wrap<WorkerInsideAPI>(worker);\n  const terminate = worker.terminate.bind(worker);\n  return { insideAPI, outsideAPI: { terminate } };\n}\n\nexport const allInsideOutsideAPIPromises: Promise<InsideOutsideAPI>[] = [];\n\nexport async function instantiateWorker(): Promise<InsideOutsideAPI> {\n  const insideOutsideAPIPromise = instantiateWorkerImplementation();\n  allInsideOutsideAPIPromises.push(insideOutsideAPIPromise);\n  const { insideAPI } = await insideOutsideAPIPromise;\n  insideAPI.setDebugMeasurePerf(searchOutsideDebugGlobals.logPerf);\n  insideAPI.setScramblePrefetchLevel(\n    searchOutsideDebugGlobals.scramblePrefetchLevel,\n  );\n  return insideOutsideAPIPromise;\n}\n\nexport async function mapToAllWorkers(\n  f: (worker: InsideOutsideAPI) => void,\n): Promise<void> {\n  await Promise.all(\n    allInsideOutsideAPIPromises.map((worker) => worker.then(f)),\n  );\n}\n\nasync function instantiateWorkerImplementation(): Promise<InsideOutsideAPI> {\n  if (globalThis.location?.protocol === \"file:\") {\n    console.warn(\n      \"This current web page is loaded from the local filesystem (a URL that starts with `file://`). In this situation, `cubing.js` may be unable to generate scrambles or perform searches in some browsers. See: https://js.cubing.net/cubing/scramble/#file-server-required\",\n    );\n  }\n\n  function failed(methodDescription?: string) {\n    return `Module worker instantiation${\n      methodDescription ? ` ${methodDescription}` : \"\"\n    } failed`;\n  }\n\n  const fallbackOrder: [\n    fn: () => Promise<InsideOutsideAPI>,\n    description: string,\n    warnOnSuccess: null | string,\n  ][] = [\n    [\n      async () =>\n        instantiateModuleWorker(await searchWorkerURLImportMetaResolve()),\n      \"using `import.meta.resolve(…)\",\n      null,\n    ],\n    [\n      async () =>\n        instantiateModuleWorker(await searchWorkerURLEsbuildWorkaround()),\n      \"using the `esbuild` workaround\",\n      // TODO: we will hopefully discontinue the `esbuild` workaround at some\n      // point, but `esbuild` has been stuck for 3 years on this issue. Because\n      // `esbuild` and Vite (which uses `esbuild`) are now dominating the\n      // ecosystem, this just causes a warning for a lot of devs/users that they\n      // can't do anything about. As frustrating as the situation is, the\n      // workaround is semantically fine (even if it's convoluted) and is\n      // preserved by `esbuild`-based flows in practice. So we suppress the\n      // warning in the medium-term but maintain long-term hope that we can\n      // remove it (and the other fallbacks as well).\n      null,\n    ],\n    [\n      async () => instantiateModuleWorker(searchWorkerURLNewURLImportMetaURL()),\n      \"using `new URL(…, import.meta.url)`\",\n      \"will\",\n    ],\n    [\n      instantiateModuleWorkerDirectlyForBrowser,\n      \"using inline `new URL(…, import.meta.url)`\",\n      \"may\",\n    ],\n  ];\n\n  for (const [fn, description, warnOnSuccess] of fallbackOrder) {\n    try {\n      const worker = await fn();\n      if (warnOnSuccess) {\n        if (searchOutsideDebugGlobals.showWorkerInstantiationWarnings) {\n          console.warn(\n            `Module worker instantiation required ${description}. \\`cubing.js\\` ${warnOnSuccess} not support this fallback in the future.`,\n          );\n        }\n      }\n      return worker;\n    } catch {\n      // if (searchOutsideDebugGlobals.showWorkerInstantiationWarnings) {\n      //   console.warn(`${failed(description)}, falling back.`);\n      // }\n    }\n  }\n\n  throw new Error(`${failed()}. There are no more fallbacks available.`);\n}\n","import { exposeAPI } from \"./worker-guard\";\n\nexport async function searchWorkerURLImportMetaResolve(): Promise<string> {\n  // Note:\n  // - We have to hardcode the expected path of the entry file in the ESM build, due to lack of `esbuild` support: https://github.com/evanw/esbuild/issues/2866\n  //   - This URL is based on the assumption that the code from this file ends up in a shared chunk in the `esm` build. This is not guaranteed by `esbuild`, but it consistently happens for our codebase.\n  // - We inline the value (instead of using a constant), to maximize compatibility for hardcoded syntax detection in bundlers.\n  // - `import.meta.resolve(…)` returns a sync result in every environment except `bun`: https://loadeverything.net/#compatibility-dashboard\n  //   - We assume that it's `async`, just in case.\n  // @ts-ignore\n  return import.meta.resolve(\"./search-worker-entry.js\");\n}\n\nexport function searchWorkerURLNewURLImportMetaURL(): URL {\n  // Note:\n  // - We have to hardcode the expected path of the entry file in the ESM build, due to lack of `esbuild` support: https://github.com/evanw/esbuild/issues/795\n  //   - This URL is based on the assumption that the code from this file ends up in a shared chunk in the `esm` build. This is not guaranteed by `esbuild`, but it consistently happens for our codebase.\n  // - We inline the value (instead of using a constant), to maximize compatibility for hardcoded syntax detection in bundlers.\n  return new URL(\"./search-worker-entry.js\", import.meta.url);\n}\n\n// Workaround for `esbuild`: https://github.com/evanw/esbuild/issues/312#issuecomment-1092195778\nexport async function searchWorkerURLEsbuildWorkaround(): Promise<string> {\n  exposeAPI.expose = false;\n  return (await import(\"./search-worker-entry.js\")).WORKER_ENTRY_FILE_URL;\n}\n\nexport function instantiateSearchWorkerURLNewURLImportMetaURL(): Worker {\n  return new Worker(new URL(\"./search-worker-entry.js\", import.meta.url), {\n    type: \"module\",\n  });\n}\n","import { Alg } from \"../alg\";\nimport type { KPuzzle } from \"../kpuzzle\";\n// import { preInitialize222 } from \"../implementations/2x2x2\";\nimport type { KPattern } from \"../kpuzzle/KPattern\";\nimport type { PrefetchLevel } from \"./inside/api\";\nimport { randomClockScrambleString } from \"./inside/solve/puzzles/clock\"; // TODO: don't reach into `inside` code.\nimport type { TwsearchOptions } from \"./inside/solve/twsearch\";\nimport {\n  type InsideOutsideAPI,\n  instantiateWorker,\n  mapToAllWorkers,\n} from \"./instantiator\";\n\nlet cachedWorkerInstance: Promise<InsideOutsideAPI> | undefined;\nfunction getCachedWorkerInstance(): Promise<InsideOutsideAPI> {\n  return (cachedWorkerInstance ??= instantiateWorker());\n}\n\n// Pre-initialize the scrambler for the given event. (Otherwise, an event is\n// initialized the first time you ask for a scramble for that event.)\n//\n// Some typical numbers for a fast computer:\n// - 3x3x3 initialization: 200ms\n// - Each 3x3x3 scramble: 50ms\n// - 4x4x4 initialization: 2500ms\n// - Each 4x4x4 scramble: 300ms to 800ms\n//\n// It is safe to immediately call for a scramble\n// any time after starting pre-initialization, or to call for them without\n// pre-initializing. Pre-initializing essentially gives the scramble worker a\n// head start in case a scramble doesn't get requested immediately.\n//\n// Note that events cannot be pre-initialized in parallel. Attempting to\n// pre-initialize multiple events will initialize them consecutively. Scrambles\n// for a given event cannot be computed while another event is being initialized.\nexport function _preInitializationHintForEvent(\n  eventID: string,\n  // callback?: () => void\n): void {\n  switch (eventID) {\n    case \"333oh\":\n      _preInitializationHintForEvent(\"333\");\n      return;\n  }\n  (async () => {\n    await (await getCachedWorkerInstance()).insideAPI.initialize(eventID);\n  })();\n}\n\nexport async function randomScrambleForEvent(eventID: string): Promise<Alg> {\n  switch (eventID) {\n    case \"clock\":\n      return Alg.fromString(await randomClockScrambleString());\n  }\n  const prom = _randomScrambleStringForEvent(eventID);\n  const wat = await prom;\n  return Alg.fromString(wat);\n}\n\nexport async function _randomScrambleStringForEvent(\n  eventID: string,\n): Promise<string> {\n  if (searchOutsideDebugGlobals.forceNewWorkerForEveryScramble) {\n  }\n  const worker = searchOutsideDebugGlobals.forceNewWorkerForEveryScramble\n    ? await instantiateWorker()\n    : await getCachedWorkerInstance();\n  return worker.insideAPI.randomScrambleStringForEvent(eventID);\n}\n\nexport async function randomScrambleStringForEvent(\n  eventID: string,\n): Promise<string> {\n  switch (eventID) {\n    case \"clock\":\n      return randomClockScrambleString();\n  }\n  return await _randomScrambleStringForEvent(eventID);\n}\n\nexport async function experimentalSolve3x3x3IgnoringCenters(\n  pattern: KPattern,\n): Promise<Alg> {\n  const cwi = await getCachedWorkerInstance();\n  return Alg.fromString(\n    await cwi.insideAPI.solve333ToString(pattern.patternData),\n  );\n}\n\nexport async function experimentalSolve2x2x2(pattern: KPattern): Promise<Alg> {\n  const cwi = await getCachedWorkerInstance();\n  return Alg.fromString(\n    await cwi.insideAPI.solve222ToString(pattern.patternData),\n  );\n}\n\nexport async function solveSkewb(pattern: KPattern): Promise<Alg> {\n  const cwi = await getCachedWorkerInstance();\n  return Alg.fromString(\n    await cwi.insideAPI.solveSkewbToString(pattern.patternData),\n  );\n}\n\nexport async function solvePyraminx(pattern: KPattern): Promise<Alg> {\n  const cwi = await getCachedWorkerInstance();\n  return Alg.fromString(\n    await cwi.insideAPI.solvePyraminxToString(pattern.patternData),\n  );\n}\n\nexport async function solveMegaminx(pattern: KPattern): Promise<Alg> {\n  const cwi = await getCachedWorkerInstance();\n  return Alg.fromString(\n    await cwi.insideAPI.solveMegaminxToString(pattern.patternData),\n  );\n}\n\nexport interface SolveTwsearchOptions {\n  generatorMoves?: string[];\n  targetPattern?: KPattern;\n  minDepth?: number;\n  maxDepth?: number;\n}\n\nexport async function solveTwsearch(\n  kpuzzle: KPuzzle,\n  pattern: KPattern,\n  options?: SolveTwsearchOptions,\n): Promise<Alg> {\n  const { targetPattern, ...otherOptions } = options ?? {};\n  const apiOptions: TwsearchOptions = otherOptions;\n  if (targetPattern) {\n    apiOptions.targetPattern = targetPattern.patternData;\n  }\n  const { ...def } = kpuzzle.definition;\n  delete def.experimentalIsPatternSolved;\n  // delete def.derivedMoves;\n  const dedicatedWorker = await instantiateWorker();\n  try {\n    return Alg.fromString(\n      await dedicatedWorker.insideAPI.solveTwsearchToString(\n        def,\n        pattern.patternData,\n        apiOptions,\n      ),\n    );\n  } finally {\n    console.log(\"Search ended, terminating dedicated `twsearch` worker.\");\n    // TODO: support re-using the same worker for multiple searches..\n    await dedicatedWorker.outsideAPI.terminate();\n  }\n}\n\ninterface SearchOutsideDebugGlobals {\n  logPerf: boolean;\n  scramblePrefetchLevel: `${PrefetchLevel}`;\n  disableStringWorker: boolean;\n  forceNewWorkerForEveryScramble: boolean;\n  showWorkerInstantiationWarnings: boolean;\n}\nexport const searchOutsideDebugGlobals: SearchOutsideDebugGlobals = {\n  logPerf: true,\n  scramblePrefetchLevel: \"auto\",\n  disableStringWorker: false,\n  forceNewWorkerForEveryScramble: false,\n  showWorkerInstantiationWarnings: true,\n};\n\nexport function setSearchDebug(\n  options: Partial<SearchOutsideDebugGlobals>,\n): void {\n  const { logPerf, scramblePrefetchLevel } = options;\n  if (typeof logPerf !== \"undefined\") {\n    searchOutsideDebugGlobals.logPerf = logPerf;\n    mapToAllWorkers((worker) => worker.insideAPI.setDebugMeasurePerf(logPerf));\n  }\n  if (typeof scramblePrefetchLevel !== \"undefined\") {\n    searchOutsideDebugGlobals.scramblePrefetchLevel = scramblePrefetchLevel;\n    mapToAllWorkers((worker) =>\n      worker.insideAPI.setScramblePrefetchLevel(\n        scramblePrefetchLevel as PrefetchLevel,\n      ),\n    );\n  }\n  if (\"disableStringWorker\" in options) {\n    searchOutsideDebugGlobals.disableStringWorker =\n      !!options.disableStringWorker;\n  }\n  if (\"forceNewWorkerForEveryScramble\" in options) {\n    searchOutsideDebugGlobals.forceNewWorkerForEveryScramble =\n      !!options.forceNewWorkerForEveryScramble;\n  }\n  if (\"showWorkerInstantiationWarnings\" in options) {\n    searchOutsideDebugGlobals.showWorkerInstantiationWarnings =\n      !!options.showWorkerInstantiationWarnings;\n  }\n}\n"],"names":["_","Cnk","fact","i","j","circle","arr","_len","arguments","length","moreArgs","Array","_key","temp","createArray","length1","length2","result","seedTable","Q$Object","Q$Serializable","Q$Center1","Q$FullCube_0","Q$FullCube_$1","Q$Object_$1","defineSeed","id","superSeed","castableTypeMap","seed","___clazz$","prototype","newSeed","castableTypeMap$","_len2","_key2","arg","makeCastMap","a","i_0","c","Array_0","createFromSeed","seedType","length_0","array","value","m","l","h","initDim","arrayClass","queryId","initValues","$clinit_Array$ExpandoWrapper","expandoNames","expandoValues","wrapArray","expandoNames_0","expandoValues_0","queryId$","setCheck","index","ran$clinit_Array$ExpandoWrapper","protoType","name_0","initExpandos","csprun","ctsmv","finish_0","ran$clinit_Center1","$$init_1","this$static","ct","$equals","obj","dstId","src","canCast","$get_1","idx","r","$getsym","cord","raw2sym","raw2sym_0","$rot","$move","m_0","key","swap","$rotate","$set_0","$set_1","Center1_0","this","Center1_1","urf","Center1_2","n","sortedArray","high","low","mid","midVal","binarySearch_0","sym2raw","syminv","symmove","symmult","ctmv","ctprun","ctrot","pmv","rlmv","rlrot","ran$clinit_Center2","$getct","$getrl","rl","parity","$move_0","$rot_0","$set_2","edgeParity","$setct","$setrl","Center2_0","ctmove","pmove","prun_0","rl2std","std2rl","ran$clinit_Center3","$getct_0","idxrl","ud","fb","check","$move_1","$set_3","eXc_parity","$setct_0","idxfb","Center3_0","$move_2","CenterCube_0","CenterCube_1","t","call","randomUIntBelow","moveCube_0","ran$clinit_CornerCube","$clinit_CornerCube","p_0","CornerCube_1","CornerCube_0","CornMult_0","initMove_0","$$init_2","cp","co","$copy_2","$move_3","temps","b","prod","corn","ori","oriA","oriB","cperm","twist","even","val","prt","p","v","set8Perm","twst","$setTwist_0","CornerCube_2","FullEdgeMap","ran$clinit_Edge3","$circlex","d","edgeo","edge","$get_2","end","valh","vall","isStd","$std","$getsym_0","symcord1x","cord1x","raw2sym_1","symx","$rotate_0","$move_4","$swap_0","$rot_1","$swapx","$set_4","factX","$set_5","e","$set_6","s","ep","x","y","Edge3_0","getPruning_0","table","getmvrot","mrIdx","movo","mvroto","mov","mvrot","getprun","cord1","cord2","cord2x","depm3","depth","symcord1","eprun","sym2raw_0","getprun_0","prun","setPruning_0","syminv_0","symstate","done_0","ran$clinit_EdgeCube","$move_5","EdgeCube_0","EdgeCube_1","move2rot","ran$clinit_FullCube_0","$$init_3","moveBuffer","$copy_4","$copy_3","$copy_1","center","corner","add1","length3","sym","moveLength","edgeAvail","centerAvail","cornerAvail","$getCenter","$getCorner","$getEdge","$getMoveString","move","rot","sb","fixedMoves","finishSym","cube","getSolvedSym","move2str_1","$move_6","FullCube_3","FullCube_4","FullCube_5","$compare_0","c1","c2","$compare","FullCube$ValueComparator_0","compareTo$","$compareTo_1","compare","ckmv","ckmv2_0","ckmv3","move2std","move3std","skipAxis","skipAxis2","skipAxis3","std2move","std3move","ran$clinit_Moves","$doSearch","MAX_LENGTH2","MAX_LENGTH3","eparity","length12","length123","s2ct","s2rl","solution","udprun","fbprun","rlprun","p1SolsCnt","arr2idx","_3Ljava_lang_Object_2_classLit","size","$clear","p1sols","heap","$search1","p1SolsArr","out","createFrom","$toArray_0","$toArray_1","_3Lcs_threephase_FullCube_2_classLit","sort","OUT","ct2","parity_0","$search2","arr2","OUT2","Math","min","e12","ct3","$search3","solcube","move3","$init2_0","next","move1","ctp","$get_4","lastValue","previous","deleteCount","splice","splice_0","$remove_0","$set_7","node","smallestChild","leftChild","rightChild","smallestChild_0","heapSize","$mergeHeaps","$removeAtIndex","$poll","o","childNode","$add_0","$offer","$add","maxl","lm","axis","ctx","power","rlx","move2","ck","$checkEdge","max","$init3","edgex","prun1","prunx","tempe","Search_4","PriorityQueue_0","init_5","inited_2","k_0","f","initSym_0","count","occ","initSym2Raw","createMoveTable","done","inv","select","fill_0","createPrun","init_3","init_4","initMvrot","initRaw2Sym","chk","dep1m3","find_0","i_","idxx","symState","g","createPrun_0","ran$clinit_Util_0","len","Class_0","createForArray","packageName","className","seedId","componentType","clazz","typeName","isInstantiable","setClassLiteral","modifiers","superclass","Ljava_lang_Object_2_classLit","createForClass","proto","String","func","getSeedFunction","ArrayList_1","toIndex","fill_1","cmp","val$outerIter","searcher","raninit","init","$clinit_Moves","$clinit_Center1","initialize","random444Scramble","suffix","Alg","fromString","random333Scramble","concat","backMoves","frontMoves","randomClockScrambleString","filteringMoveCount","randomSuffix","amount","moves","side","families","family","push","join","useNodeWorkarounds","globalThis","Worker","WorkerNavigator","constructWorker","source","options","worker","async","NodeWorker","process","getBuiltinModule","unref","node_adapter_default","nodeWorker","type","instantiateModuleWorker","workerEntryFileURL","url","tryTrampolineFirst","scriptOrigin","location","origin","workerOrigin","probablyCrossOrigin","instantiateModuleWorkerAttempt","crossOriginTrampoline","Promise","resolve","reject","Error","importSrc","JSON","stringify","toString","blob","Blob","URL","createObjectURL","onError","onFirstMessage","messageData","wrapWithTerminate","once","addEventListener","data","instantiateModuleWorkerDirectlyForBrowser","insideAPI","wrap","outsideAPI","terminate","bind","cachedWorkerInstance","allInsideOutsideAPIPromises","instantiateWorker","insideOutsideAPIPromise","protocol","console","warn","failed","methodDescription","fallbackOrder","import","searchWorkerURLImportMetaResolve","exposeAPI","expose","WORKER_ENTRY_FILE_URL","searchWorkerURLEsbuildWorkaround","fn","description","warnOnSuccess","searchOutsideDebugGlobals","showWorkerInstantiationWarnings","instantiateWorkerImplementation","setDebugMeasurePerf","logPerf","setScramblePrefetchLevel","scramblePrefetchLevel","getCachedWorkerInstance","randomScrambleForEvent","eventID","prom","forceNewWorkerForEveryScramble","randomScrambleStringForEvent","_randomScrambleStringForEvent","wat","disableStringWorker"],"sourceRoot":""}