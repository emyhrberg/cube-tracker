{"version":3,"file":"static/js/758.4abdcf06.chunk.js","mappings":"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","sources":["../node_modules/cubing/src/cubing/vendor/mpl/xyzzy/master_tetraminx-solver.js"],"sourcesContent":["/* master pyraminx scramble generator */\n// From https://gist.github.com/torchlight/9a5c53da09d8e090756a228f4b5f3471\n// Added to `cubing.js` under the GPL license by permission from the author (@torchlight/xyzzy).\n\n\"use strict\";\n\nimport { randomUIntBelow } from \"random-uint-below\";\n\nfunction counter(A) {\n  let counts = [];\n  for (let a of A) {\n    counts[a] = (counts[a] || 0) + 1;\n  }\n  return counts;\n}\n\n/* Combinatoric functions */\n\nfunction factorial(n) {\n  if (n < 2) {\n    return n;\n  }\n  let f = 1;\n  for (let i = 2; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n}\n\nfunction identity_permutation(n) {\n  let a = Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i;\n  }\n  return a;\n}\n\nfunction permutation_to_index(perm) {\n  perm = perm.slice();\n  let n = perm.length;\n  let f = factorial(n - 1);\n  let ind = 0;\n  while (n > 1) {\n    n--;\n    // invariant: f === factorial(n)\n    // also, perm stores meaningful values up to perm[n]\n    let e = perm[0];\n    ind += e * f;\n    for (let i = 0; i < n; i++) {\n      let x = perm[i + 1];\n      perm[i] = x - (x > e);\n    }\n    f /= n;\n  }\n  return ind;\n}\n\nfunction index_to_permutation(ind, n) {\n  let perm = [];\n  let f = factorial(n - 1);\n  for (let i = 0; i < n; i++) {\n    perm[i] = (ind / f) | 0;\n    ind %= f;\n    f /= n - 1 - i;\n  }\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      perm[j] += +(perm[j] >= perm[i]);\n    }\n  }\n  return perm;\n}\n\nfunction permutation_parity(A) {\n  let n = A.length;\n  let parity = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i; j < n; j++) {\n      if (A[i] > A[j]) {\n        parity ^= 1;\n      }\n    }\n  }\n  return parity;\n}\n\nfunction index_to_evenpermutation(ind, n) {\n  let perm = [];\n  let f = factorial(n - 1) / 2;\n  let parity = 0;\n  for (let i = 0; i < n - 1; i++) {\n    perm[i] = (ind / f) | 0;\n    ind %= f;\n    f /= n - 1 - i;\n  }\n  perm[n - 1] = 0;\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (perm[j] >= perm[i]) {\n        perm[j]++;\n      } else {\n        parity ^= 1;\n      }\n    }\n  }\n  if (parity === 1) {\n    [perm[n - 2], perm[n - 1]] = [perm[n - 1], perm[n - 2]];\n  }\n  return perm;\n}\n\nfunction evenpermutation_to_index(perm) {\n  return permutation_to_index(perm) >> 1;\n}\n\nlet [evenpermutation12_to_index, index_to_evenpermutation12] = (() => {\n  let index_in_set_bits = new Int8Array(4096 * 12);\n  let look_up_set_bits = new Int8Array(4096 * 12);\n  for (let i = 0; i < 4096; i++) {\n    for (let j = 0, counter = 0; j < 12; j++) {\n      if (((i >>> j) & 1) === 0) {\n        continue;\n      }\n      index_in_set_bits[(j << 12) | i] = counter;\n      look_up_set_bits[(counter << 12) | i] = j;\n      counter++;\n    }\n  }\n\n  function evenpermutation12_to_index(perm) {\n    let unused = 0xfff; // track which values in 0..11 haven't been used so far\n    let f = 19958400; // = 11!/2\n    let ind = 0;\n    for (let i = 0; i < 10; i++) {\n      let v = perm[i];\n      ind += index_in_set_bits[unused | (v << 12)] * f;\n      unused &= ~(1 << v);\n      f /= 11 - i;\n    }\n    return ind;\n  }\n\n  function index_to_evenpermutation12(ind, perm) {\n    let unused = 0xfff;\n    let f = 19958400; // = 11!/2\n    let parity = 0;\n    for (let i = 0; i < 10; i++) {\n      let a = (ind / f) | 0;\n      ind -= a * f;\n      parity ^= a & 1;\n      let v = look_up_set_bits[unused | (a << 12)];\n      perm[i] = v;\n      unused &= ~(1 << v);\n      f /= 11 - i;\n    }\n    // the last two elements are uniquely determined by the other ten\n    perm[10] = look_up_set_bits[unused | (parity << 12)];\n    perm[11] = look_up_set_bits[unused | ((parity ^ 1) << 12)];\n    return perm;\n  }\n\n  // these functions could be significantly faster with SWAR, but we can't SWAR here without 64-bit\n  // bitwise ops. :<\n\n  return [evenpermutation12_to_index, index_to_evenpermutation12];\n})();\n\nfunction compose(A, B) {\n  let C = [];\n  for (let i = 0; i < B.length; i++) {\n    C[i] = A[B[i]];\n  }\n  return C;\n}\n\nfunction double_compose(A, B, C) {\n  let D = [];\n  for (let i = 0; i < C.length; i++) {\n    D[i] = A[B[C[i]]];\n  }\n  return D;\n}\n\nfunction invert(perm) {\n  let inv = [];\n  for (let i = 0; i < perm.length; i++) {\n    inv[perm[i]] = i;\n  }\n  return inv;\n}\n\nfunction permutation_from_cycle(cycle, n) {\n  let perm = [];\n  for (let i = 0; i < n; i++) {\n    perm[i] = i;\n  }\n  for (let i = 0; i < cycle.length; i++) {\n    perm[cycle[i]] = cycle[(i + 1) % cycle.length];\n  }\n  return perm;\n}\n\nfunction permutation_from_cycles(cycles, n) {\n  if (cycles.length === 0) {\n    return identity_permutation(n);\n  }\n  return cycles\n    .map((cycle) => permutation_from_cycle(cycle, n))\n    .reduce(compose);\n  // not very efficient, but this function is only called during init so it's fine\n}\n\n/* puzzle-specific stuff */\n\n/*\nWe will (mostly) ignore the trivial tips here. When we say \"single-layer\", we mean one layer\n*excluding* the tip, so it's really two layers on the physical puzzle; likewise, \"double-layer\"\nmeans three layers on the physical puzzle. Hopefully this won't be too confusing.\n\nTips (\"zero-layer\" moves?) are written with a single lowercase letter: u, l, r, b.\nSingle-layer moves are written with a single uppercase letter: U, L, R, B.\nDouble-layer moves are written with a single uppercase letter and a w suffix: Uw, Lw, Rw, Bw.\n\nThe master pyraminx has four types of pieces:\n- 4 corners (same as pyraminx); three orientations each (no permutation).\n- 6 midges (same as pyraminx); even permutation, two orientations each, sum(orientations)%2 = 0.\n- 12 wings; even permutation (no orientation).\n- 4 centres; even permutation (no visible orientation).\n\nThe total number of states is (3^4) * (6!/2 * 2^5) * (12!/2) * (4!/2) = 2 681 795 837 952 000.\n\nThis is small enough that an optimal solver is feasible *if* we can use large pruning tables, but\nif we want to keep init times short, a two-phase algorithm would be much better. Here, we will use a\ntwo-phase reduction algorithm: the first phase reduces to a Halpern-Meier Pyramid / Jing's pyraminx,\nand the second phase just solves that (using only double-layer moves).\n\nSome ~group theory~ flexing: the alternating group A_4 (acting on the centres) has a copy of the\nKlein four-group V as a normal subgroup of index 3. We can name the cosets (other than V itself) as\nthe cw coset if the elements are a clockwise 3-cycle (as viewed from a corner) and the ccw coset if\nthe elements are an anticlockwise 3-cycle. On the H-M pyra, (the name of) the V-coset of the centres\nis exactly the sum of the orientations of the corners mod 3; this follows from V being a normal\nsubgroup of A_4.\n\n---\n\nIn the first phase, we:\n(i) do edge pairing (12!/2 ~ 2.4e8);\n(ii) ensure the V-coset of the centres matches the corner orientations (3).\n\nRelevant coordinates:\nlocations of a midge and its matching wings + centre stuff ((6*12*11) * 3 = 2376)\n\nPruning table:\n- forming two tredges + centre stuff ((6*5*12*11*10*9) * 3 = 1069200)\n- counting solved wings versus flipped wings + centre stuff (21 * 2 = 42)\n\nThe first pruning table takes around a quarter of a second to generate, which is kinda slow, but it\ncan't be helped. We check all fifteen possible pairs. (Checking only three pairs is enough, but has\nvery poor worst-case performance.)\n\nThe second pruning table takes literally an hour to generate, but it's also small so we just hard-\ncode all of its values instead of computing it on initialisation. Using this table kills off worst-\ncase behaviour on \"bad\" scrambles, but doesn't do a lot on \"median\" scrambles.\n\n---\n\nIn the second phase, we solve the puzzle like a H-M pyra.\n\nRelevant coordinates:\n(i) edge permutation, location of yellow centre (6!/2 * 4 = 1440)\n(ii) edge orientation, corner orientation (2^5 * 3^4 = 2592)\n\nCorner orientation uniquely determines the V-coset of the centre permutation, and since V acts\nsharply transitively on the centres, knowing where the yellow centre is uniquely determines which\nelement of that V-coset is the centre permutation.\n\n---\n\nConsiderations for generating scrambles:\n\nTip scrambling: the standard pyraminx scramblers just put the tips at the end of the scramble. This\nis *really bad* when we're doing the scrambles by hand and then immediately solving afterwards.\nIdeally, the scramble sequence shouldn't reveal any obvious information about the scramble.\n\nLike 333 and a few other puzzles, the states of a master pyra have a group structure, and so we can\ntake inverses. Once we have generated a random state, we can return either the inverse of its\nsolution, or the solution of its inverse. Since inversion preserves uniformity, we could just as\nwell just directly return a solution of a random state.\n\n---\n\n(ASCII nets modified from TNoodle's source code comments)\n\ncorners:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /3 \\  /  \\  /0 \\       U        /0 \\  /  \\  /3 \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\  /  \\  /  \\  /   /  \\0 /  \\   \\  /  \\  /  \\  /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\  /1 \\  /   /  \\  /  \\  /  \\   \\  /2 \\  /\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\1 /  \\  /  \\2 /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /1 \\  /  \\  /2 \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\  /  \\  /  \\  /\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\  /3 \\  /\n*                            \\/____\\/\n*\n*                               B\n\nmidges:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /  \\  /11\\  /  \\       U        /  \\  /5 \\  /  \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\  /8 \\  /7 \\  /   /  \\  /  \\   \\  /9 \\  /10\\  /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\  /  \\  /   /  \\1 /  \\3 /  \\   \\  /  \\  /\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\  /  \\0 /  \\  /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /  \\  /6 \\  /  \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\  /2 \\  /4 \\  /\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\  /  \\  /\n*                            \\/____\\/\n*\n*                               B\n\nwings:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /  \\5 /  \\11/  \\       U        /  \\11/  \\5 /  \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\8 /  \\  /  \\1 /   /1 \\  /9 \\   \\9 /  \\  /  \\4 /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\2 /  \\7 /   /7 \\  /  \\  /3 \\   \\3 /  \\10/\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\  /0 \\  /6 \\  /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /  \\0 /  \\6 /  \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\2 /  \\  /  \\10/\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\8 /  \\4 /\n*                            \\/____\\/\n*\n*                               B\n\ncentres:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /  \\  /  \\  /  \\       U        /  \\  /  \\  /  \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\  /  \\2 /  \\  /   /  \\  /  \\   \\  /  \\1 /  \\  /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\  /  \\  /   /  \\  /3 \\  /  \\   \\  /  \\  /\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\  /  \\  /  \\  /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /  \\  /  \\  /  \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\  /  \\0 /  \\  /\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\  /  \\  /\n*                            \\/____\\/\n*\n*                               B\n\n---\n\nfull state:\n{\n co: int[4]: corner orientation (ccw twist = 1, cw twist = 2),\n mp: int[12]: midge facelet permutation (this encodes orientation as well),\n wp: int[12]: wing permutation,\n cp: int[4]: centre permutation\n}\n\nphase 1 state:\nint[6]: locations of midge and matching wings + (CO - coset index) % 3\n\nphase 2 state:\n[\n int: edge permutation + yellow centre coordinate (0..1439),\n int: edge orientation + corner orientation coordinate (0..2591)\n]\n*/\n\nfunction compose_state(state1, state2) {\n  let co = Array(4);\n  for (let i = 0; i < 4; i++) {\n    co[i] = (state1.co[i] + state2.co[i]) % 3;\n  }\n  let mp = compose(state1.mp, state2.mp);\n  let wp = compose(state1.wp, state2.wp);\n  let cp = compose(state1.cp, state2.cp);\n  return { co: co, mp: mp, wp: wp, cp: cp };\n}\n\nfunction invert_state(state) {\n  let co = Array(4);\n  for (let i = 0; i < 4; i++) {\n    co[i] = (3 - state.co[i]) % 3;\n  }\n  let mp = invert(state.mp);\n  let wp = invert(state.wp);\n  let cp = invert(state.cp);\n  return { co: co, mp: mp, wp: wp, cp: cp };\n}\n\nlet solved = {\n  co: [0, 0, 0, 0],\n  mp: identity_permutation(12),\n  wp: identity_permutation(12),\n  cp: [0, 1, 2, 3],\n};\n\n// the single-layer moves don't affect midges (mp) or centres (cp)\nlet move_U = {\n  co: [2, 0, 0, 0],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([1, 9, 11], 12),\n  cp: [0, 1, 2, 3],\n};\nlet move_L = {\n  co: [0, 2, 0, 0],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([0, 7, 2], 12),\n  cp: [0, 1, 2, 3],\n};\nlet move_R = {\n  co: [0, 0, 2, 0],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([3, 6, 10], 12),\n  cp: [0, 1, 2, 3],\n};\nlet move_B = {\n  co: [0, 0, 0, 2],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([4, 8, 5], 12),\n  cp: [0, 1, 2, 3],\n};\n\n// the double-layer moves affect everything, but permute the midges and wings identically\nlet move_Uw = {\n  co: [2, 0, 0, 0],\n  mp: permutation_from_cycles(\n    [\n      [1, 9, 11],\n      [7, 3, 5],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [1, 9, 11],\n      [7, 3, 5],\n    ],\n    12,\n  ),\n  cp: [0, 2, 3, 1],\n};\nlet move_Lw = {\n  co: [0, 2, 0, 0],\n  mp: permutation_from_cycles(\n    [\n      [0, 7, 2],\n      [6, 1, 8],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [0, 7, 2],\n      [6, 1, 8],\n    ],\n    12,\n  ),\n  cp: [3, 1, 0, 2],\n};\nlet move_Rw = {\n  co: [0, 0, 2, 0],\n  mp: permutation_from_cycles(\n    [\n      [3, 6, 10],\n      [9, 0, 4],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [3, 6, 10],\n      [9, 0, 4],\n    ],\n    12,\n  ),\n  cp: [1, 3, 2, 0],\n};\nlet move_Bw = {\n  co: [0, 0, 0, 2],\n  mp: permutation_from_cycles(\n    [\n      [4, 8, 5],\n      [10, 2, 11],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [4, 8, 5],\n      [10, 2, 11],\n    ],\n    12,\n  ),\n  cp: [2, 0, 1, 3],\n};\n\nlet moves = [\n  move_Uw,\n  move_Lw,\n  move_Rw,\n  move_Bw,\n  move_U,\n  move_L,\n  move_R,\n  move_B,\n];\nlet move_names = [\"u\", \"l\", \"r\", \"b\", \"U\", \"L\", \"R\", \"B\"];\nconst N_MOVES = 8; // number of moves\nconst N_MOVES_PHASE2 = 4; // number of moves for phase 2\n\nfunction moves_commute(i, j) {\n  // single-layer moves always commute with each other\n  if (i >= 4 && j >= 4) {\n    return true;\n  }\n  // double-layer moves commute iff they are equal\n  if (i < 4 && j < 4) {\n    return i === j;\n  }\n  // a single-layer and a double-layer move commute iff they're on the same axis\n  return (i ^ j) === 4;\n}\n\nfunction apply_move_sequence(state, move_sequence) {\n  for (let [m, r] of move_sequence) {\n    for (let i = 0; i < r; i++) {\n      state = compose_state(state, moves[m]);\n    }\n  }\n  return state;\n}\n\nfunction stringify_move_sequence(move_sequence) {\n  let suffixes = [\"0\", \"\", \"'\"];\n  let s = move_sequence.map(([m, r]) => move_names[m] + suffixes[r]);\n  return s.join(\" \");\n}\n\nfunction print_move_sequence(move_sequence) {\n  console.log(stringify_move_sequence(move_sequence));\n}\n\nfunction generate_random_state() {\n  // master pyra has no \"nontrivial\" restrictions, beyond the usual parity stuff\n  let co = Array(4);\n  for (let i = 0; i < 4; i++) {\n    co[i] = randomUIntBelow(3);\n  }\n  let mp = index_to_evenpermutation(randomUIntBelow(factorial(6) / 2), 6);\n  for (let i = 0, parity = 0; i < 6; i++) {\n    let eo = i === 5 ? parity : randomUIntBelow(2);\n    parity ^= eo;\n    mp[i] += eo * 6;\n    mp[i + 6] = (mp[i] + 6) % 12;\n  }\n  let wp = index_to_evenpermutation(randomUIntBelow(factorial(12) / 2), 12);\n  let cp = index_to_evenpermutation(randomUIntBelow(factorial(4) / 2), 4);\n  return { co: co, mp: mp, wp: wp, cp: cp };\n}\n\nfunction generate_random_state_scramble() {\n  return solve(generate_random_state(randomUIntBelow));\n}\n\nfunction generate_scramble_sequence(tips = true, obfuscate_tips = false) {\n  let scramble_string = stringify_move_sequence(\n    generate_random_state_scramble(),\n  );\n  if (!tips) {\n    return scramble_string;\n  }\n  let tip_names = [\"u\", \"l\", \"r\", \"b\"];\n  let suffixes = [\"0\", \"\", \"'\"];\n  if (!obfuscate_tips) {\n    for (let i = 0; i < 4; i++) {\n      let x = randomUIntBelow(3);\n      if (x !== 0) {\n        scramble_string += ` ${tip_names[i]}${suffixes[x]}`;\n      }\n    }\n    return scramble_string.trim();\n  }\n  let amount = [];\n  let amount_pre = [];\n  let amount_post = [];\n  for (let i = 0; i < 4; i++) {\n    amount[i] = randomUIntBelow(3);\n    amount_pre[i] = randomUIntBelow(3);\n    amount_post[i] = (amount[i] - amount_pre[i] + 3) % 3;\n  }\n  let weight = (arr) => arr.filter((x) => x !== 0).length;\n  while (\n    !(\n      weight(amount_pre) >= 1 &&\n      weight(amount_post) >= 1 &&\n      weight(amount_pre) + weight(amount_post) >= 4\n    )\n  ) {\n    for (let i = 0; i < 4; i++) {\n      amount_pre[i] = randomUIntBelow(3);\n      amount_post[i] = (amount[i] - amount_pre[i] + 3) % 3;\n    }\n  }\n  let prepend = amount_pre\n    .map((x, i) => (x !== 0 ? `${tip_names[i]}${suffixes[x]} ` : \"\"))\n    .join(\"\");\n  let append = amount_post\n    .map((x, i) => (x !== 0 ? ` ${tip_names[i]}${suffixes[x]}` : \"\"))\n    .join(\"\");\n  return prepend + scramble_string + append;\n  // this technically has the extremely edge case of the original no-tip scramble being the\n  // trivial scramble and the resulting string will have a double space, but this is Very Rare\n}\n\nfunction solve(state) {\n  let phase1_indices = index_phase1(state);\n  let phase2_mtables = [\n    generate_phase2_permutation_mtable(),\n    generate_phase2_orientation_mtable(),\n  ];\n  let phase2_ptables = [\n    generate_phase2_permutation_ptable(),\n    generate_phase2_orientation_ptable(),\n  ];\n\n  let phase1gen = phase1_ida_solve_gen(phase1_indices);\n  let best = undefined;\n  let intermediate_states = new Set();\n  let start_time = performance.now();\n  for (let i = 0; i < 22; i++) {\n    let { value: sol1, done } = phase1gen.next();\n    let new_state = state;\n    for (let [m, r] of sol1) {\n      for (let i = 0; i < r; i++) {\n        new_state = compose_state(new_state, moves[m]);\n      }\n    }\n    let stringified_state = JSON.stringify(new_state);\n    if (intermediate_states.has(stringified_state)) {\n      // console.log(\"skip\");\n      continue;\n    } else {\n      intermediate_states.add(stringified_state);\n    }\n    let phase2_indices = index_phase2(new_state);\n    //let sol2 = [];\n    let moves_left = best ? best.length - sol1.length - 1 : 999999;\n    let sol2 = ida_solve_gen(\n      phase2_indices,\n      phase2_mtables,\n      phase2_ptables,\n      moves_left,\n    ).next().value;\n    if (sol2 === undefined) {\n      // console.log(\"prune\");\n      continue;\n    }\n    // console.log(\n    //   `to ${stringified_state} in ${sol1.length} moves; total move count ${\n    //     sol1.length + sol2.length\n    //   }`,\n    // );\n    if (best === undefined || best.length > sol1.length + sol2.length) {\n      best = sol1.concat(sol2);\n    }\n    // bail if we've spent too much time\n    if (performance.now() - start_time > 300) {\n      break;\n    }\n  }\n  return best;\n}\n\nfunction determine_V_coset(p) {\n  // p: even permutation on 4 elements\n  // NOTE: the formula depends on the centre ordering and corner orientation conventions\n  // V itself is 0, ccw coset is 1, cw coset is 2.\n  return p[3 ^ p.indexOf(3)];\n}\n\nfunction index_phase1(state) {\n  let w = compose(invert(state.mp), state.wp);\n  let c =\n    (state.co.reduce((x, y) => x + y) - determine_V_coset(state.cp) + 3) % 3;\n  return [0, 1, 2, 3, 4, 5].map(\n    (i) => i + 6 * w.indexOf(i) + 72 * w.indexOf(i + 6) + 864 * c,\n  );\n}\n\nlet phase1_permtable_m = [];\nlet phase1_permtable_minv = [];\nlet phase1_permtable_w = [];\nlet phase1_permtable_winv = [];\nfor (let i = 0; i < N_MOVES; i++) {\n  let move = moves[i];\n  phase1_permtable_m[i] = move.mp;\n  phase1_permtable_minv[i] = invert(move.mp);\n  phase1_permtable_w[i] = move.wp;\n  phase1_permtable_winv[i] = invert(move.wp);\n}\nlet phase1_c_update = [0, 0, 0, 0, 2, 2, 2, 2];\n\n/* score = (# matching wings - # flipped wings) + 12\n(the +12 is to make it have range 0..24 rather than -12..12)\n\nthis is more effective than looking at # matching wings alone, or # flipped wings alone.\n\nstats for centre/corner solved:\njs> num_by_score\n[1, 0, 0, 320, 1350, 11328, 77280, 422400, 2016735, 7808000, 23467296, 50855040, 70181300, 50855040, 23467296, 7808000, 2016735, 422400, 77280, 11328, 1350, 320, 0, 0, 1]\njs> min_by_score\n[14, 9999, 9999, 11, 11, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 4, 3, 9999, 9999, 0]\njs> max_by_score\n[14, -9999, -9999, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 11, 10, 10, 10, 9, 8, 8, 5, -9999, -9999, 0]\njs> sum_by_score\n[14, 0, 0, 3856, 16458, 131856, 904280, 4885752, 23019405, 87454032, 256924344, 542481888, 725249936, 501317616, 218566356, 67825352, 16313334, 3116472, 509352, 63600, 7854, 1288, 0, 0, 0]\n\nstats for centre/corner unsolved:\njs> min_by_score\n[13, 9999, 9999, 11, 10, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 3, 1, 9999, 9999, 6]\njs> max_by_score\n[13, -9999, -9999, 13, 13, 13, 13, 13, 13, 13, 13, 12, 13, 12, 11, 11, 10, 9, 9, 8, 8, 6, -9999, -9999, 6]\njs> sum_by_score\n[13, 0, 0, 3792, 16026, 133344, 900726, 4870308, 23008797, 87434932, 256859772, 542586948, 725077315, 501101484, 218802804, 67943128, 16250601, 3110148, 509044, 65940, 7284, 1148, 0, 0, 6]\n\n*/\n\nlet phase1_score_ptable = [\n  //-12        -9  -8  -7 -6 -5 -4 -3 -2 -1  0  1  2  3  4  5  6  7  8  9         12\n  [\n    14, -1, -1, 11, 11, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 4, 3, -1,\n    -1, 0,\n  ],\n  [\n    13, -1, -1, 11, 10, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 3, 1, -1,\n    -1, 6,\n  ],\n];\nlet phase1_score_ptable_condensed = new Int8Array(55);\nfor (let i = 0; i < 25; i++) {\n  phase1_score_ptable_condensed[i] = phase1_score_ptable[0][i];\n  phase1_score_ptable_condensed[i + 30] = phase1_score_ptable[1][i];\n}\nlet phase1_coord_to_score = new Int8Array(6 * 12 * 12 * 3);\nfor (let i = 0; i < 6; i++) {\n  for (let j = 0; j < 12; j++) {\n    for (let k = 0; k < 12; k++) {\n      let index = i + 6 * j + 72 * k;\n      let score = 2;\n      if (j === i) {\n        score++;\n      } else if (j === (i + 6) % 12) {\n        score--;\n      }\n      if (k === (i + 6) % 12) {\n        score++;\n      } else if (k === i) {\n        score--;\n      }\n      phase1_coord_to_score[index] = score;\n      phase1_coord_to_score[index + 6 * 12 * 12] = phase1_coord_to_score[\n        index + 2 * 6 * 12 * 12\n      ] = score + 5;\n    }\n  }\n}\n\nfunction phase1_benchmark() {\n  /* some 13-move phase 1 states*/\n  let phase1_test_states = [\n    [1836, 2551, 1922, 1947, 2440, 2063],\n    [1674, 1153, 1058, 1353, 1000, 1271],\n    [1764, 2497, 1904, 2001, 2242, 2087],\n    [582, 301, 566, 273, 40, 431],\n    [600, 217, 200, 477, 136, 431],\n    [60, 613, 98, 273, 214, 407],\n    [36, 265, 98, 777, 190, 431],\n    [1764, 1987, 2402, 1881, 2368, 2159],\n    [36, 277, 194, 129, 334, 431],\n    [1764, 1843, 1928, 2499, 2158, 2039],\n    [528, 721, 194, 429, 112, 275],\n    [840, 115, 182, 219, 346, 425],\n    [1752, 1831, 2498, 1989, 2416, 1943],\n    [324, 133, 554, 231, 58, 431],\n    [18, 331, 194, 495, 658, 431],\n    [1764, 1987, 1880, 2337, 2578, 2081],\n    [1776, 1855, 1934, 1989, 2050, 2231],\n    [396, 811, 194, 297, 712, 47],\n    [816, 115, 482, 273, 148, 425],\n    [972, 907, 1070, 1281, 1174, 1511],\n  ];\n  generate_phase1_pairing2c_ptable();\n  let start = performance.now();\n  for (let coords of phase1_test_states) {\n    phase1_ida_solve_gen(coords).next();\n  }\n  return performance.now() - start;\n}\n\nfunction* phase1_ida_solve_gen(coords) {\n  let bound = 0;\n  let mtable = generate_phase1_pairingc_mtable();\n  let ptable = generate_phase1_pairing2c_ptable();\n  while (true) {\n    yield* phase1_ida_search_gen(...coords, mtable, ptable, bound, -1);\n    bound++;\n  }\n}\n\nfunction* phase1_ida_search_gen(a, b, c, d, e, f, mtable, ptable, bound, last) {\n  let nmoves = N_MOVES; // = 8\n  let score =\n    phase1_coord_to_score[a] +\n    phase1_coord_to_score[b] +\n    phase1_coord_to_score[c] +\n    phase1_coord_to_score[d] +\n    phase1_coord_to_score[e] +\n    phase1_coord_to_score[f];\n  let heuristic = Math.max(\n    ptable[(a % 864) + b * 864],\n    ptable[(c % 864) + b * 864],\n    ptable[(e % 864) + b * 864],\n    ptable[(a % 864) + d * 864],\n    ptable[(c % 864) + d * 864],\n    ptable[(e % 864) + d * 864],\n    ptable[(a % 864) + f * 864],\n    ptable[(c % 864) + f * 864],\n    ptable[(e % 864) + f * 864],\n    ptable[(a % 864) + c * 864],\n    ptable[(a % 864) + e * 864],\n    ptable[(c % 864) + e * 864],\n    ptable[(b % 864) + d * 864],\n    ptable[(b % 864) + f * 864],\n    ptable[(d % 864) + f * 864],\n    phase1_score_ptable_condensed[score],\n  );\n  if (heuristic > bound) {\n    return;\n  }\n  if (bound === 0) {\n    yield [];\n    return;\n  }\n  if (heuristic === 0 && bound === 1) {\n    return;\n  }\n  for (let m = 0; m < nmoves; m++) {\n    if (m === last) {\n      continue;\n    }\n    if (m < last && moves_commute(m, last)) {\n      continue;\n    }\n    let A = a;\n    let B = b;\n    let C = c;\n    let D = d;\n    let E = e;\n    let F = f;\n    for (let r = 1; r <= 2; r++) {\n      A = mtable[A][m];\n      B = mtable[B][m];\n      C = mtable[C][m];\n      D = mtable[D][m];\n      E = mtable[E][m];\n      F = mtable[F][m];\n      let subpath_gen = phase1_ida_search_gen(\n        A,\n        B,\n        C,\n        D,\n        E,\n        F,\n        mtable,\n        ptable,\n        bound - 1,\n        m,\n      );\n      while (true) {\n        let { value: subpath, done } = subpath_gen.next();\n        if (done) {\n          break;\n        }\n        yield [[m, r]].concat(subpath);\n      }\n    }\n  }\n}\n\nfunction index_phase2(state) {\n  let edges = state.mp;\n  let ep = evenpermutation_to_index(edges.slice(0, 6).map((x) => x % 6));\n  let eo = edges\n    .slice(0, 5)\n    .map((x, i) => (x >= 6) * 2 ** i)\n    .reduce((x, y) => x + y);\n  let co = state.co.map((x, i) => x * 3 ** i).reduce((x, y) => x + y);\n  let cloc = state.cp.indexOf(0);\n  return [ep + 360 * cloc, eo + 32 * co];\n}\n\nlet tables = {};\n\nfunction generate_phase1_pairing_mtable() {\n  if (tables.phase1pm) {\n    return tables.phase1pm;\n  }\n  let mtable = Array(6 * 12 * 12)\n    .fill()\n    .map(() => Array(N_MOVES).fill(-1));\n  for (let midge = 0; midge < 6; midge++) {\n    for (let wingl = 0; wingl < 12; wingl++) {\n      for (let wingh = 0; wingh < 12; wingh++) {\n        if (wingl === wingh) {\n          continue;\n        }\n        let index = midge + 6 * wingl + 72 * wingh;\n        for (let m = 0; m < N_MOVES; m++) {\n          let new_midge = phase1_permtable_minv[m][midge];\n          let new_wingl = phase1_permtable_winv[m][wingl];\n          let new_wingh = phase1_permtable_winv[m][wingh];\n          if (new_midge < 6) {\n            mtable[index][m] = new_midge + 6 * new_wingl + 72 * new_wingh;\n          } else {\n            mtable[index][m] = new_midge - 6 + 6 * new_wingh + 72 * new_wingl;\n          }\n        }\n      }\n    }\n  }\n  return (tables.phase1pm = mtable);\n}\n\nfunction generate_phase1_pairingc_mtable() {\n  if (tables.phase1pcm) {\n    return tables.phase1pcm;\n  }\n  let mtable_pairing = generate_phase1_pairing_mtable();\n  let mtable = Array(mtable_pairing.length * 3)\n    .fill()\n    .map(() => Array(N_MOVES).fill(-1));\n  for (let index = 0; index < mtable_pairing.length; index++) {\n    for (let m = 0; m < N_MOVES; m++) {\n      let new_index = mtable_pairing[index][m];\n      mtable[index][m] = new_index + 6 * 12 * 12 * phase1_c_update[m];\n      mtable[index + 6 * 12 * 12][m] =\n        new_index + 6 * 12 * 12 * ((phase1_c_update[m] + 1) % 3);\n      mtable[index + 2 * 6 * 12 * 12][m] =\n        new_index + 6 * 12 * 12 * ((phase1_c_update[m] + 2) % 3);\n    }\n  }\n  return (tables.phase1pcm = mtable);\n}\n\nfunction generate_phase1_pairing2c_ptable() {\n  if (tables.phase1p2cp) {\n    return tables.phase1p2cp;\n  }\n  let mtable_noc = generate_phase1_pairing_mtable();\n  let mtable = generate_phase1_pairingc_mtable();\n  let ptable = new Int8Array((6 * 12 * 12) ** 2 * 3);\n  ptable.fill(-1);\n  let g = [0, 1, 2, 3, 4, 5].map((x) => x + 6 * x + 72 * (x + 6));\n  for (let i = 0; i < 6; i++) {\n    for (let j = 0; j < 6; j++) {\n      if (i === j) {\n        continue;\n      }\n      ptable[g[i] + 864 * g[j]] = 0;\n    }\n  }\n  let dist = 0;\n  while (true) {\n    let changed = false;\n    for (let index = 0; index < ptable.length; index++) {\n      if (ptable[index] !== dist) {\n        continue;\n      }\n      let index0 = index % 864;\n      let index1 = Math.floor(index / 864);\n      for (let m = 0; m < N_MOVES; m++) {\n        let new_index0 = index0;\n        let new_index1 = index1;\n        for (let r = 1; r <= 2; r++) {\n          new_index0 = mtable_noc[new_index0][m];\n          new_index1 = mtable[new_index1][m];\n          let new_index = new_index0 + 864 * new_index1;\n          if (ptable[new_index] === -1) {\n            changed = true;\n            ptable[new_index] = dist + 1;\n          }\n        }\n      }\n    }\n    if (!changed) {\n      break;\n    }\n    dist++;\n  }\n  return (tables.phase1p2cp = ptable);\n}\n\nfunction generate_phase1_full_ptable() {\n  // extremely slow, do not use\n  if (tables.phase1p) {\n    return tables.phase1p;\n  }\n  const HALFFACT12 = factorial(12) / 2;\n  const SIZE = HALFFACT12 * 3;\n  let ptable = new Int8Array(SIZE).fill(-1);\n  ptable[0] = 0;\n  let dist = 0;\n  let perm = new Int8Array(12);\n  let new_perm = new Int8Array(12);\n  while (true) {\n    let changed = false;\n    let count = 0;\n    for (let index = 0; index < SIZE; index++) {\n      if (ptable[index] !== dist) {\n        continue;\n      }\n      count++;\n      let cindex = index % 3;\n      let windex = (index - cindex) / 3;\n      index_to_evenpermutation12(windex, perm);\n      for (let m = 0; m < N_MOVES; m++) {\n        let move_m = phase1_permtable_m[m];\n        let move_minv = phase1_permtable_minv[m];\n        let move_w = phase1_permtable_w[m];\n        let move_winv = phase1_permtable_winv[m];\n        {\n          // clockwise move\n          let new_cindex = (cindex + phase1_c_update[m]) % 3;\n          for (let i = 0; i < 12; i++) {\n            new_perm[i] = move_minv[perm[move_w[i]]];\n          }\n          let new_windex = evenpermutation12_to_index(new_perm);\n          let new_index = new_cindex + 3 * new_windex;\n          if (ptable[new_index] === -1) {\n            changed = true;\n            ptable[new_index] = dist + 1;\n          }\n        }\n        {\n          // anticlockwise move\n          let new_cindex = (cindex + 3 - phase1_c_update[m]) % 3;\n          for (let i = 0; i < 12; i++) {\n            new_perm[i] = move_m[perm[move_winv[i]]];\n          }\n          let new_windex = evenpermutation12_to_index(new_perm);\n          let new_index = new_cindex + 3 * new_windex;\n          if (ptable[new_index] === -1) {\n            changed = true;\n            ptable[new_index] = dist + 1;\n          }\n        }\n      }\n    }\n    console.log(`${count} nodes at depth ${dist}`);\n    if (!changed) {\n      break;\n    }\n    dist++;\n  }\n  return (tables.phase1p = ptable);\n}\n\nfunction generate_phase2_permutation_mtable() {\n  if (tables.phase2pm) {\n    return tables.phase2pm;\n  }\n  let mtable = Array(1440)\n    .fill()\n    .map(() => Array(N_MOVES_PHASE2));\n  for (let ep = 0; ep < 360; ep++) {\n    let perm = index_to_evenpermutation(ep, 6);\n    // fill in the \"opposite\" values\n    for (let i = 0; i < 6; i++) {\n      perm[i + 6] = perm[i] + 6;\n    }\n    for (let m = 0; m < N_MOVES_PHASE2; m++) {\n      let new_perm = compose(perm, moves[m].mp);\n      let new_ep = evenpermutation_to_index(\n        new_perm.slice(0, 6).map((x) => x % 6),\n      );\n      for (let new_cloc = 0; new_cloc < 4; new_cloc++) {\n        let cloc = moves[m].cp[new_cloc];\n        mtable[ep + 360 * cloc][m] = new_ep + 360 * new_cloc;\n      }\n    }\n  }\n  return (tables.phase2pm = mtable);\n}\n\nfunction generate_phase2_orientation_mtable() {\n  if (tables.phase2om) {\n    return tables.phase2om;\n  }\n  let mtable = Array(32 * 81)\n    .fill()\n    .map(() => Array(N_MOVES_PHASE2));\n  for (let eo = 0; eo < 32; eo++) {\n    let eo_array = [0, 1, 2, 3, 4].map((i) => (eo >> i) & 1);\n    eo_array[5] = eo_array.reduce((x, y) => x ^ y);\n    let perm = [];\n    for (let i = 0; i < 6; i++) {\n      perm[i] = i + 6 * eo_array[i];\n      perm[i + 6] = i + 6 * (eo_array[i] ^ 1);\n    }\n    for (let co = 0; co < 81; co++) {\n      let co_array = [0, 1, 2, 3].map((i) => Math.floor(co / 3 ** i) % 3);\n      for (let m = 0; m < N_MOVES_PHASE2; m++) {\n        let new_perm = compose(perm, moves[m].mp);\n        let new_eo_array = new_perm.slice(0, 5).map((x) => +(x >= 6));\n        let new_eo = 0;\n        for (let i = 0; i < 5; i++) {\n          new_eo += new_eo_array[i] << i;\n        }\n        let new_co_array = co_array.map((x, i) => (x + moves[m].co[i]) % 3);\n        let new_co = 0;\n        for (let i = 0; i < 4; i++) {\n          new_co += new_co_array[i] * 3 ** i;\n        }\n        mtable[eo + 32 * co][m] = new_eo + 32 * new_co;\n      }\n    }\n  }\n  return (tables.phase2om = mtable);\n}\n\nfunction generate_phase2_permutation_ptable() {\n  if (tables.phase2pp) {\n    return tables.phase2pp;\n  }\n  return (tables.phase2pp = bfs(generate_phase2_permutation_mtable(), [0]));\n}\n\nfunction generate_phase2_orientation_ptable() {\n  if (tables.phase2op) {\n    return tables.phase2op;\n  }\n  return (tables.phase2op = bfs(generate_phase2_orientation_mtable(), [0]));\n}\n\nfunction bfs(mtable, goal_states) {\n  let N = mtable.length;\n  let nmoves = mtable[0].length;\n  let ptable = Array(N).fill(-1);\n  let queue = goal_states.slice();\n  let new_queue = [];\n  let depth = 0;\n  while (queue.length > 0) {\n    new_queue.length = 0;\n    for (let state of queue) {\n      if (ptable[state] !== -1) {\n        continue;\n      }\n      ptable[state] = depth;\n      for (let move_index = 0; move_index < nmoves; move_index++) {\n        let new_state = mtable[state][move_index];\n        while (new_state !== state) {\n          new_queue.push(new_state);\n          new_state = mtable[new_state][move_index];\n        }\n      }\n    }\n    [queue, new_queue] = [new_queue, queue];\n    depth += 1;\n  }\n  return ptable;\n}\n\nfunction* ida_solve_gen(indices, mtables, ptables, moves_left) {\n  let ncoords = indices.length;\n  let bound = 0;\n  for (let i = 0; i < ncoords; i++) {\n    bound = Math.max(bound, ptables[i][indices[i]]);\n  }\n  while (bound <= moves_left) {\n    yield* ida_search_gen(indices, mtables, ptables, bound, -1);\n    bound++;\n  }\n}\n\nfunction* ida_search_gen(indices, mtables, ptables, bound, last) {\n  let ncoords = indices.length;\n  let nmoves = mtables[0][0].length;\n  let heuristic = 0;\n  for (let i = 0; i < ncoords; i++) {\n    heuristic = Math.max(heuristic, ptables[i][indices[i]]);\n  }\n  if (heuristic > bound) {\n    return;\n  }\n  if (bound === 0) {\n    yield [];\n    return;\n  }\n  if (heuristic === 0 && bound === 1) {\n    return;\n  }\n  for (let m = 0; m < nmoves; m++) {\n    if (m === last) {\n      continue;\n    }\n    if (m < last && moves_commute(m, last)) {\n      continue;\n    }\n    let new_indices = indices.slice();\n    for (let c = 0; c < ncoords; c++) {\n      new_indices[c] = mtables[c][indices[c]][m];\n    }\n    let r = 1;\n    while (indices.some((_, i) => indices[i] !== new_indices[i])) {\n      let subpath_gen = ida_search_gen(\n        new_indices,\n        mtables,\n        ptables,\n        bound - 1,\n        m,\n      );\n      while (true) {\n        let { value: subpath, done } = subpath_gen.next();\n        if (done) {\n          break;\n        }\n        yield [[m, r]].concat(subpath);\n      }\n      for (let c = 0; c < ncoords; c++) {\n        new_indices[c] = mtables[c][new_indices[c]][m];\n      }\n      r++;\n    }\n  }\n}\n\nexport async function randomMasterTetraminxScrambleString() {\n  return generate_scramble_sequence(false);\n}\n"],"names":["factorial","n","f","i","identity_permutation","a","Array","index_to_evenpermutation","ind","perm","parity","j","evenpermutation_to_index","slice","length","e","x","permutation_to_index","evenpermutation12_to_index","index_to_evenpermutation12","index_in_set_bits","Int8Array","look_up_set_bits","counter","unused","v","compose","A","B","C","invert","inv","permutation_from_cycle","cycle","permutation_from_cycles","cycles","map","reduce","compose_state","state1","state2","co","mp","wp","cp","move_U","move_L","move_R","move_B","moves","move_names","N_MOVES","N_MOVES_PHASE2","moves_commute","generate_random_state_scramble","state","best","phase1_indices","w","c","y","p","indexOf","index_phase1","phase2_mtables","generate_phase2_permutation_mtable","generate_phase2_orientation_mtable","phase2_ptables","generate_phase2_permutation_ptable","generate_phase2_orientation_ptable","phase1gen","coords","bound","mtable","generate_phase1_pairingc_mtable","ptable","tables","phase1p2cp","mtable_noc","generate_phase1_pairing_mtable","fill","g","dist","changed","index","index0","index1","Math","floor","m","new_index0","new_index1","r","new_index","generate_phase1_pairing2c_ptable","phase1_ida_search_gen","phase1_ida_solve_gen","intermediate_states","Set","start_time","performance","now","value","sol1","done","next","new_state","i2","stringified_state","JSON","stringify","has","add","sol2","ida_solve_gen","index_phase2","concat","solve","randomUIntBelow","eo","generate_random_state","generate_scramble_sequence","tips","arguments","undefined","obfuscate_tips","scramble_string","move_sequence","suffixes","_ref","join","stringify_move_sequence","tip_names","trim","amount","amount_pre","amount_post","weight","arr","filter","phase1_permtable_m","phase1_permtable_minv","phase1_permtable_w","phase1_permtable_winv","move","phase1_c_update","phase1_score_ptable","phase1_score_ptable_condensed","phase1_coord_to_score","k","score","b","d","last","nmoves","heuristic","max","D","E","F","subpath_gen","subpath","edges","ep","phase1pm","midge","wingl","wingh","new_midge","new_wingl","new_wingh","phase1pcm","mtable_pairing","phase2pm","new_ep","new_cloc","phase2om","eo_array","co_array","new_eo_array","new_eo","new_co_array","new_co","phase2pp","bfs","phase2op","goal_states","N","queue","new_queue","depth","move_index","push","indices","mtables","ptables","moves_left","ncoords","ida_search_gen","new_indices","some","_","randomMasterTetraminxScrambleString"],"sourceRoot":""}