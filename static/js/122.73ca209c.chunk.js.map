{"version":3,"file":"static/js/122.73ca209c.chunk.js","mappings":"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","sources":["../node_modules/cubing/src/cubing/vendor/mpl/xyzzy/redi_cube.js","../node_modules/cubing/src/cubing/search/inside/solve/puzzles/dynamic/sgs-unofficial/fto.sgs.ts","../node_modules/cubing/src/cubing/search/inside/solve/parseSGS.ts"],"sourcesContent":["/* Redi cube scramble generator */\n// From https://torchlight.github.io/rediscrambler.js\n// Added to `cubing.js` under the GPL license by permission from the author (@torchlight/xyzzy).\n\n\"use strict\";\n\nimport { Alg } from \"../../../alg\";\nimport { randomUIntBelow } from \"random-uint-below\";\n\nfunction counter(A) {\n  let counts = [];\n  for (let a of A) {\n    counts[a] = (counts[a] || 0) + 1;\n  }\n  return counts;\n}\n\n/* Combinatoric functions */\n\nfunction factorial(n) {\n  if (n < 2) {\n    return n;\n  }\n  let f = 1;\n  for (let i = 2; i <= n; i++) {\n    f *= i;\n  }\n  return f;\n}\n\nfunction C(n, k) {\n  if (k < 0 || k > n) {\n    return 0;\n  }\n  if (k === 0 || k === n) {\n    return 1;\n  }\n  let c = 1;\n  for (let i = 0; i < k; i++) {\n    c = ((c * (n - i)) / (i + 1)) | 0;\n  }\n  return c;\n}\n\nfunction permutation_to_index(perm) {\n  perm = perm.slice();\n  let n = perm.length;\n  let f = factorial(n - 1);\n  let ind = 0;\n  while (n > 1) {\n    n--;\n    // invariant: f === factorial(n)\n    // also, perm stores meaningful values up to perm[n]\n    let e = perm[0];\n    ind += e * f;\n    for (let i = 0; i < n; i++) {\n      let x = perm[i + 1];\n      perm[i] = x - (x > e);\n    }\n    f /= n;\n  }\n  return ind;\n}\n\nfunction index_to_permutation(ind, n) {\n  let perm = [];\n  let f = factorial(n - 1);\n  for (let i = 0; i < n; i++) {\n    perm[i] = (ind / f) | 0;\n    ind %= f;\n    f /= n - 1 - i;\n  }\n  // could probably use some kind of binary tree to make this linearithmic, but I am hella lazy.\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      perm[j] += +(perm[j] >= perm[i]);\n    }\n  }\n  return perm;\n}\n\nfunction permutation_parity(A) {\n  let n = A.length;\n  let parity = 0;\n  // again, there is a linearithmic algorithm to count inversions, but >lazy\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i; j < n; j++) {\n      if (A[i] > A[j]) {\n        parity ^= 1;\n      }\n    }\n  }\n  return parity;\n}\n\nfunction index_to_evenpermutation(ind, n) {\n  let perm = [];\n  let f = factorial(n - 1) / 2;\n  let parity = 0;\n  for (let i = 0; i < n - 1; i++) {\n    perm[i] = (ind / f) | 0;\n    ind %= f;\n    f /= n - 1 - i;\n  }\n  perm[n - 1] = 0;\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (perm[j] >= perm[i]) {\n        perm[j]++;\n      } else {\n        parity ^= 1;\n      }\n    }\n  }\n  if (parity === 1) {\n    [perm[n - 2], perm[n - 1]] = [perm[n - 1], perm[n - 2]];\n  }\n  return perm;\n}\n\nfunction evenpermutation_to_index(perm) {\n  return permutation_to_index(perm) >> 1;\n}\n\nfunction comb_to_index(l) {\n  let bits = l.length;\n  let ones = 0;\n  for (let i = 0; i < bits; i++) {\n    ones += +(l[i] === 1);\n  }\n  let zeros = bits - ones;\n  if (zeros === 0 || ones === 0 || bits === 1) {\n    return 0;\n  }\n  let b = C(bits - 1, ones);\n  let ind = 0;\n  for (let i = 0; zeros > 0 && ones > 0 && bits > 1; i++) {\n    bits--;\n    if (l[i] === 0) {\n      b = (b * --zeros) / bits;\n    } else {\n      // l[i] === 1\n      ind += b;\n      b = (b * ones--) / bits;\n    }\n  }\n  return ind;\n}\n\nfunction index_to_comb(ind, ones, bits) {\n  let zeros = bits - ones;\n  let b = C(bits - 1, ones);\n  let l = [];\n  let n = bits - 1;\n  for (let i = 0; i < n; i++) {\n    bits--;\n    if (ind < b) {\n      l.push(0);\n      b = (b * --zeros) / bits;\n    } else {\n      l.push(1);\n      ind -= b;\n      b = (b * ones--) / bits;\n    }\n  }\n  l.push(ones);\n  return l;\n}\n\nfunction compose(A, B) {\n  let C = [];\n  for (let i = 0; i < B.length; i++) {\n    C[i] = A[B[i]];\n  }\n  return C;\n}\n\nfunction permutation_from_cycle(cycle, n) {\n  let perm = [];\n  for (let i = 0; i < n; i++) {\n    perm[i] = i;\n  }\n  for (let i = 0; i < cycle.length; i++) {\n    perm[cycle[i]] = cycle[(i + 1) % cycle.length];\n  }\n  return perm;\n}\n\nfunction unsparsify_list(d, n) {\n  let l = Array(n).fill(0);\n  for (let k in d) {\n    l[k] = d[k];\n  }\n  return l;\n}\n\nfunction compose_state(state1, state2) {\n  let o = Array(8).fill(0);\n  for (let i = 0; i < 8; i++) {\n    o[i] = (state1[1][i] + state2[1][i]) % 3;\n  }\n  return [compose(state1[0], state2[0]), o];\n}\n\nlet move_UL = [\n  permutation_from_cycle([0, 1, 4], 12),\n  unsparsify_list({ 0: 2 }, 8),\n];\nlet move_U = [\n  permutation_from_cycle([1, 2, 5], 12),\n  unsparsify_list({ 1: 2 }, 8),\n];\nlet move_UR = [\n  permutation_from_cycle([2, 3, 6], 12),\n  unsparsify_list({ 2: 2 }, 8),\n];\nlet move_F = [\n  permutation_from_cycle([3, 0, 7], 12),\n  unsparsify_list({ 3: 2 }, 8),\n];\nlet move_L = [\n  permutation_from_cycle([9, 8, 4], 12),\n  unsparsify_list({ 4: 2 }, 8),\n];\nlet move_B = [\n  permutation_from_cycle([10, 9, 5], 12),\n  unsparsify_list({ 5: 2 }, 8),\n];\nlet move_R = [\n  permutation_from_cycle([11, 10, 6], 12),\n  unsparsify_list({ 6: 2 }, 8),\n];\nlet move_D = [\n  permutation_from_cycle([8, 11, 7], 12),\n  unsparsify_list({ 7: 2 }, 8),\n];\n\nlet solved = [index_to_permutation(0, 12), Array(8).fill(0)];\n\nlet moves = [move_UL, move_U, move_UR, move_F, move_L, move_B, move_R, move_D];\nlet move_names = [\"UL\", \"U\", \"UR\", \"F\", \"L\", \"B\", \"R\", \"D\"];\nlet tetrad = [0, 1, 0, 1, 1, 0, 1, 0];\n\nfunction apply_move_sequence(state, move_sequence) {\n  for (let [m, r] of move_sequence) {\n    for (let i = 0; i < r; i++) {\n      state = compose_state(state, moves[m]);\n    }\n  }\n  return state;\n}\n\nfunction stringify_move_sequence(move_sequence) {\n  let suffixes = [\"0\", \"\", \"'\"];\n  let s = move_sequence.map(([m, r]) => move_names[m] + suffixes[r]);\n  return s.join(\" \");\n}\n\nfunction print_move_sequence(move_sequence) {\n  console.log(stringify_move_sequence(move_sequence));\n}\n\nfunction generate_random_state() {\n  let p = index_to_evenpermutation(\n    Math.floor(randomUIntBelow(factorial(12)) / 2),\n    12,\n  );\n  let o = Array(8);\n  for (let i = 0; i < 8; i++) {\n    o[i] = randomUIntBelow(3);\n  }\n  return [p, o];\n}\n\nfunction generate_random_state_scramble() {\n  return solve(generate_random_state());\n}\n\nfunction generate_scramble_sequence() {\n  return stringify_move_sequence(generate_random_state_scramble());\n}\n\nfunction solve(state) {\n  let phase1_indices = index_phase1(state);\n  let phase1_mtables = [\n    generate_phase1_edge_mtable(),\n    generate_phase1_separate_mtable(),\n  ];\n  let phase1_ptables = [\n    generate_phase1_edge_ptable(),\n    generate_phase1_separate_ptable(),\n  ];\n  let phase2_mtables = [\n    generate_phase2_edge_mtable(),\n    generate_phase2_corner_mtable(),\n  ];\n  let phase2_ptables = [\n    generate_phase2_edge_ptable(),\n    generate_phase1_corner_ptable(),\n  ];\n\n  let phase1gen = ida_solve_gen(phase1_indices, phase1_mtables, phase1_ptables);\n  let best = undefined;\n  let intermediate_states = new Set();\n  let start_time = +new Date();\n  for (let i = 0; i < 25; i++) {\n    let { value: sol1, done } = phase1gen.next();\n    let new_state = state;\n    for (let [m, r] of sol1) {\n      for (let i = 0; i < r; i++) {\n        new_state = compose_state(new_state, moves[m]);\n      }\n    }\n    if (intermediate_states.has(new_state.toString())) {\n      // console.log(\"skip\");\n      continue;\n    } else {\n      intermediate_states.add(new_state.toString());\n    }\n    let edge_ind = evenpermutation_to_index(new_state[0].slice(0, 8));\n    let corner_ind = 0;\n    for (let i = 0; i < 4; i++) {\n      corner_ind += new_state[1][i] * 3 ** i;\n    }\n    let phase2_indices = [edge_ind, corner_ind];\n    //let sol2 = [];\n    let moves_left = best ? best.length - sol1.length - 1 : 999999;\n    let sol2 = ida_solve(\n      phase2_indices,\n      phase2_mtables,\n      phase2_ptables,\n      moves_left,\n    );\n    if (sol2 === undefined) {\n      // console.log(\"prune\");\n      continue;\n    }\n    // console.log(\n    //   `to ${new_state} in ${sol1.length} moves; total move count ${\n    //     sol1.length + sol2.length\n    //   }`,\n    // );\n    if (best === undefined || best.length > sol1.length + sol2.length) {\n      best = sol1.concat(sol2);\n    }\n    // bail if we've spent too much time\n    if (new Date() - start_time > 300) {\n      break;\n    }\n  }\n  return best;\n}\n\nfunction index_phase1(state) {\n  let edge_ind = 0;\n  for (let i = 0; i < 4; i++) {\n    edge_ind += state[0].indexOf(i + 8) * 12 ** i;\n  }\n  let corner_ind = 0;\n  for (let i = 0; i < 4; i++) {\n    corner_ind += state[1][i + 4] * 3 ** i;\n  }\n  let filtered = state[0].map((x) => Math.max(-1, x - 8));\n  let separate_ind =\n    comb_to_index(filtered.map((x) => +(x >= 0))) * 2 +\n    permutation_parity(filtered.filter((x) => x >= 0));\n  return [edge_ind, corner_ind + 81 * separate_ind];\n}\n\nlet tables = {};\n\nfunction generate_phase1_corner_mtable() {\n  if (tables.phase1cm) {\n    return tables.phase1cm;\n  }\n  let mtable = [];\n  for (let i = 0; i < 81; i++) {\n    mtable[i] = Array(8);\n    let o = [\n      i % 3,\n      Math.floor(i / 3) % 3,\n      Math.floor(i / 9) % 3,\n      Math.floor(i / 27),\n    ];\n    mtable[i][0] = mtable[i][1] = mtable[i][2] = mtable[i][3] = i;\n    for (let j = 0; j < 4; j++) {\n      o[j] = (o[j] + 2) % 3;\n      mtable[i][4 + j] = o[0] + o[1] * 3 + o[2] * 9 + o[3] * 27;\n      o[j] = (o[j] + 1) % 3;\n    }\n  }\n  return (tables.phase1cm = mtable);\n}\n\nfunction generate_phase1_corner_ptable() {\n  if (tables.phase1cp) {\n    return tables.phase1cp;\n  }\n  let ptable = Array(81);\n  for (let i = 0; i < 81; i++) {\n    let o = [\n      i % 3,\n      Math.floor(i / 3) % 3,\n      Math.floor(i / 9) % 3,\n      Math.floor(i / 27),\n    ];\n    ptable[i] = (o[0] !== 0) + (o[1] !== 0) + (o[2] !== 0) + (o[3] !== 0);\n  }\n  return (tables.phase1cp = ptable);\n}\n\nfunction generate_phase1_edge_mtable() {\n  if (tables.phase1em) {\n    return tables.phase1em;\n  }\n  let mtable_single = [];\n  for (let i = 0; i < 12; i++) {\n    mtable_single[i] = [];\n    for (let m = 0; m < 8; m++) {\n      mtable_single[i][m] = moves[m][0].indexOf(i);\n    }\n  }\n  let mtable = Array(12 ** 4);\n  for (let i = 0; i < 12 ** 4; i++) {\n    mtable[i] = Array(8);\n    for (let m = 0; m < 8; m++) {\n      let I = 0;\n      for (let j = 0; j < 4; j++) {\n        I += mtable_single[Math.floor(i / 12 ** j) % 12][m] * 12 ** j;\n      }\n      mtable[i][m] = I;\n    }\n  }\n  return (tables.phase1em = mtable);\n}\n\nfunction generate_phase1_edge_ptable() {\n  if (tables.phase1ep) {\n    return tables.phase1ep;\n  }\n  return (tables.phase1ep = bfs(generate_phase1_edge_mtable(), [\n    8 + 12 * (9 + 12 * (10 + 12 * 11)),\n  ]));\n}\n\nfunction generate_phase1_separate_mtable() {\n  if (tables.phase1sm) {\n    return tables.phase1sm;\n  }\n  const C12_4 = C(12, 4);\n  let mtable_c = [];\n  for (let i = 0; i < C12_4; i++) {\n    mtable_c[i] = [];\n    let comb = index_to_comb(i, 4, 12);\n    let perm = [];\n    for (let j = 0, k = 0; j < 12; j++) {\n      if (comb[j] === 0) {\n        perm[j] = -1;\n      } else {\n        perm[j] = k++;\n      }\n    }\n    for (let m = 0; m < 8; m++) {\n      let new_perm = compose(perm, moves[m][0]);\n      let new_comb = compose(comb, moves[m][0]);\n      let parity = permutation_parity(new_perm.filter((x) => x >= 0));\n      mtable_c[i][m] = comb_to_index(new_comb) * 2 + parity;\n    }\n  }\n  let mtable_co = generate_phase1_corner_mtable();\n  let mtable = [];\n  for (let j = 0; j < C12_4; j++) {\n    for (let i = 0; i < 81; i++) {\n      let m0 = (mtable[i + 81 * (2 * j)] = []);\n      let m1 = (mtable[i + 81 * (2 * j + 1)] = []);\n      for (let m = 0; m < 8; m++) {\n        m0[m] = mtable_co[i][m] + 81 * mtable_c[j][m];\n        m1[m] = mtable_co[i][m] + 81 * (mtable_c[j][m] ^ 1);\n      }\n    }\n  }\n  return (tables.phase1sm = mtable);\n}\n\nfunction generate_phase1_separate_ptable() {\n  if (tables.phase1sp) {\n    return tables.phase1sp;\n  }\n  return (tables.phase1sp = bfs(generate_phase1_separate_mtable(), [0]));\n}\n\nfunction generate_phase2_corner_mtable() {\n  if (tables.phase2cm) {\n    return tables.phase2cm;\n  }\n  let phase1_mtable = generate_phase1_corner_mtable();\n  let mtable = Array(81);\n  for (let i = 0; i < 81; i++) {\n    mtable[i] = phase1_mtable[i].slice(4, 8);\n  }\n  return (tables.phase2cm = mtable);\n}\n\nfunction generate_phase2_edge_mtable() {\n  if (tables.phase2em) {\n    return tables.phase2em;\n  }\n  const n = 8;\n  const HALFFACT8 = factorial(n) / 2;\n  let mtable = Array(HALFFACT8);\n  let perm = [0, 1, 2, 3, 4, 5, 6, 7];\n  for (let i = 0; i < HALFFACT8; i++) {\n    //perm = index_to_evenpermutation(i, 8);\n    mtable[i] = Array(4);\n    for (let m = 0; m < 4; m++) {\n      let new_perm = compose(perm, moves[m][0].slice(0, 8));\n      mtable[i][m] = evenpermutation_to_index(new_perm);\n    }\n\n    if (i === HALFFACT8 - 1) {\n      break;\n    }\n    // update perm to lex-next even permutation\n    let parity = 0;\n    do {\n      for (let k = n - 2; k >= 0; k--) {\n        if (perm[k] > perm[k + 1]) {\n          continue;\n        }\n        let l = k + 1;\n        for (let L = l; L < n; L++) {\n          if (perm[L] > perm[k]) {\n            l = L;\n          }\n        }\n        [perm[k], perm[l]] = [perm[l], perm[k]];\n        parity ^= 1;\n        for (let j = 0; k + 1 + j < n - 1 - j; j++, parity ^= 1) {\n          [perm[k + 1 + j], perm[n - 1 - j]] = [\n            perm[n - 1 - j],\n            perm[k + 1 + j],\n          ];\n        }\n        break;\n      }\n    } while (parity !== 0);\n  }\n  return (tables.phase2em = mtable);\n}\n\nfunction generate_phase2_edge_ptable() {\n  if (tables.phase2ep) {\n    return tables.phase2ep;\n  }\n  return (tables.phase2ep = bfs(generate_phase2_edge_mtable(), [0]));\n}\n\nfunction bfs(mtable, goal_states) {\n  let N = mtable.length;\n  let nmoves = mtable[0].length;\n  let ptable = Array(N).fill(-1);\n  let queue = goal_states.slice();\n  let new_queue = [];\n  let depth = 0;\n  while (queue.length > 0) {\n    new_queue.length = 0;\n    for (let state of queue) {\n      if (ptable[state] !== -1) {\n        continue;\n      }\n      ptable[state] = depth;\n      for (let move_index = 0; move_index < nmoves; move_index++) {\n        let new_state = mtable[state][move_index];\n        while (new_state !== state) {\n          new_queue.push(new_state);\n          new_state = mtable[new_state][move_index];\n        }\n      }\n    }\n    [queue, new_queue] = [new_queue, queue];\n    depth += 1;\n  }\n  return ptable;\n}\n\nfunction ida_solve(indices, mtables, ptables, max_bound) {\n  max_bound = max_bound || 999999;\n  let ncoords = indices.length;\n  let bound = 0;\n  for (let i = 0; i < ncoords; i++) {\n    bound = Math.max(bound, ptables[i][indices[i]]);\n  }\n  while (bound <= max_bound) {\n    let path = ida_search(indices, mtables, ptables, bound, -1);\n    if (path !== undefined) {\n      return path;\n    }\n    bound++;\n  }\n}\n\nfunction ida_search(indices, mtables, ptables, bound, last) {\n  let ncoords = indices.length;\n  let nmoves = mtables[0][0].length;\n  let heuristic = 0;\n  for (let i = 0; i < ncoords; i++) {\n    heuristic = Math.max(heuristic, ptables[i][indices[i]]);\n  }\n  if (heuristic > bound) {\n    return;\n  }\n  if (bound === 0) {\n    return [];\n  }\n  if (heuristic === 0 && bound === 1) {\n    return;\n  }\n  for (let m = 0; m < nmoves; m++) {\n    if (m === last) {\n      continue;\n    }\n    if (m < last && tetrad[m] === tetrad[last]) {\n      continue;\n    }\n    let new_indices = indices.slice();\n    for (let c = 0; c < ncoords; c++) {\n      new_indices[c] = mtables[c][indices[c]][m];\n    }\n    let r = 1;\n    while (indices.some((_, i) => indices[i] !== new_indices[i])) {\n      let subpath = ida_search(new_indices, mtables, ptables, bound - 1, m);\n      if (subpath !== undefined) {\n        return [[m, r]].concat(subpath);\n      }\n      for (let c = 0; c < ncoords; c++) {\n        new_indices[c] = mtables[c][new_indices[c]][m];\n      }\n      r++;\n    }\n  }\n  return;\n}\n\nfunction* ida_solve_gen(indices, mtables, ptables) {\n  let ncoords = indices.length;\n  let bound = 0;\n  for (let i = 0; i < ncoords; i++) {\n    bound = Math.max(bound, ptables[i][indices[i]]);\n  }\n  while (true) {\n    yield* ida_search_gen(indices, mtables, ptables, bound, -1);\n    bound++;\n  }\n}\n\nfunction* ida_search_gen(indices, mtables, ptables, bound, last) {\n  let ncoords = indices.length;\n  let nmoves = mtables[0][0].length;\n  let heuristic = 0;\n  for (let i = 0; i < ncoords; i++) {\n    heuristic = Math.max(heuristic, ptables[i][indices[i]]);\n  }\n  if (heuristic > bound) {\n    return;\n  }\n  if (bound === 0) {\n    yield [];\n    return;\n  }\n  if (heuristic === 0 && bound === 1) {\n    return;\n  }\n  for (let m = 0; m < nmoves; m++) {\n    if (m === last) {\n      continue;\n    }\n    if (m < last && tetrad[m] === tetrad[last]) {\n      continue;\n    }\n    let new_indices = indices.slice();\n    for (let c = 0; c < ncoords; c++) {\n      new_indices[c] = mtables[c][indices[c]][m];\n    }\n    let r = 1;\n    while (indices.some((_, i) => indices[i] !== new_indices[i])) {\n      let subpath_gen = ida_search_gen(\n        new_indices,\n        mtables,\n        ptables,\n        bound - 1,\n        m,\n      );\n      while (true) {\n        let { value: subpath, done } = subpath_gen.next();\n        if (done) {\n          break;\n        }\n        yield [[m, r]].concat(subpath);\n      }\n      for (let c = 0; c < ncoords; c++) {\n        new_indices[c] = mtables[c][new_indices[c]][m];\n      }\n      r++;\n    }\n  }\n}\n\nexport async function getRandomRediCubeScramble() {\n  return new Alg(stringify_move_sequence(generate_random_state_scramble()));\n}\n","import { puzzles } from \"../../../../../../puzzles\";\nimport { parseSGS, type SGSCachedData } from \"../../../parseSGS\";\n\nlet cachedData: Promise<SGSCachedData> | null = null;\nexport async function sgsDataFTO() {\n  return (cachedData ??= uncachedSGSDataFTO());\n}\n\n// TODO: Reduce info.\nasync function uncachedSGSDataFTO(): Promise<SGSCachedData> {\n  return parseSGS(\n    await puzzles[\"fto\"].kpuzzle(),\n    `SubgroupSizes 24 12 11 12 12 11 10 9 11 8 10 9 7 8 10 10 6 9 8 5 7 6 5 4 4 8 7 3 6 6 360\n\nAlg T\nAlg B\nAlg B T\nAlg B'\nAlg B' T\nAlg U\nAlg U T\nAlg U'\nAlg U' T\nAlg B BL\nAlg B BL T\nAlg B BL'\nAlg B BL' T\nAlg B' BR\nAlg B' BR T\nAlg B' BR'\nAlg B' BR' T\nAlg U R'\nAlg U R' T\nAlg U' L\nAlg U' L T\nAlg B BL' D\nAlg B BL' D T\n\nAlg R\nAlg R'\nAlg R D\nAlg R D'\nAlg R BR\nAlg R BR'\nAlg R' F\nAlg R' L\nAlg R' L'\nAlg B L B'\nAlg U L' U'\n\nAlg B U B'\nAlg B U' B'\nAlg B R B'\nAlg B R' B'\nAlg B' U' B\nAlg B' U B L\nAlg B' U B L'\nAlg B' U' B BL'\nAlg B U' B' BR\nAlg B' R' B F\n\nAlg BR\nAlg BR'\nAlg BR BL\nAlg BR BL'\nAlg BR' F\nAlg BR' F'\nAlg BR' D\nAlg B BR B'\nAlg U F U'\nAlg BR BL L\nAlg BR' D BR'\n\nAlg B' BL B\nAlg B' BL' B\nAlg BR D' BR'\nAlg B' BL B D'\nAlg B' BL B BL\nAlg B' BL B BL'\nAlg B' BL L B\nAlg B' BL' B F'\nAlg B' BL' B L'\nAlg B' BL' B BL'\nAlg B' BL' L BL' B\n\nAlg R' BR R\nAlg R' BR' R\nAlg BR BL' D BR\nAlg R' BR D R\nAlg R' BR D' R\nAlg R' BR R BL\nAlg B' D' BL D B\nAlg BR B D' B' BR'\nAlg BR BL' D BR L'\nAlg BR BL' D BL BR\n\nAlg U BR U'\nAlg U BR' U'\nAlg U' R U\nAlg U' R' U\nAlg U BR B' U'\nAlg U BR' U' D\nAlg U BR' U' D'\nAlg U' R F' U\nAlg U' R' U L'\n\nAlg U B U'\nAlg U B' U'\nAlg U B U' L\nAlg U B U' L'\nAlg U B' U' BL'\nAlg U B U' L F\nAlg U B U' L F'\nAlg U B' U' BL' D'\n\nAlg B BL' L BL B'\nAlg B BL' L' BL B'\nAlg U B' D B U'\nAlg U B' D' B U'\nAlg U R D R' U'\nAlg U R D' R' U'\nAlg R' F L F' R\nAlg R' F L' F' R\nAlg B L' B F' D B\nAlg U B' D' B U' D\n\nAlg F\nAlg F'\nAlg F D\nAlg F D'\nAlg F' L\nAlg F' L'\nAlg F D' BL\n\nAlg F BL F'\nAlg F BL' F'\nAlg BR' BL BR\nAlg BR' BL' BR\nAlg F BR F' BR'\nAlg F BL F' BL'\nAlg F BL' F' L\nAlg F BL' L' F'\nAlg F BR' BL BR F'\n\nAlg F' BL F\nAlg F' BL' F\nAlg U BL U'\nAlg U BL' U'\nAlg F U' F' U\nAlg F' BL F D'\nAlg F' BL F BL'\nAlg F' BL D F\n\nAlg L\nAlg L'\nAlg L BL\nAlg L BL'\nAlg F' D F\nAlg L BL D\n\nAlg L' BL L\nAlg L' BL' L\nAlg L' BL D L\nAlg L' BL D' L\nAlg L' BL L BL'\nAlg L' BL D' L BL\nAlg L' BL D' L BL'\n\nAlg L D L'\nAlg L D' L'\nAlg R' D R\nAlg R' D' R\nAlg L D L' D'\nAlg L R L' R'\nAlg L' B' L B\nAlg R' D R BL\nAlg L BL' L' BL L'\n\nAlg U L' D L U'\nAlg U B D B' U'\nAlg U L' D' L U'\nAlg U B D' B' U'\nAlg R' D' BL' D R\nAlg U B D' B' U' D\nAlg U B' L B L' U'\nAlg U B D B' U' BL'\nAlg U B D' B' L' D' L U'\n\nAlg F L F'\nAlg F L' F'\nAlg F L F' D\nAlg F L F' D'\nAlg F L' F' BL'\n\nAlg L BL' D BL L'\nAlg L BL' D' BL L'\nAlg F D L D' L' F'\nAlg F L D L' D' F'\nAlg F L' B' L B F'\nAlg F' D' R' D R F\nAlg F D L D' L' F' BL'\nAlg F' R' B' R' B R' F\n\nAlg B D B'\nAlg B D' B'\nAlg L' D L\nAlg L' D' L\nAlg B D B' D'\nAlg B' L B L'\nAlg B D B' D' BL\n\nAlg D\nAlg D'\nAlg D BL\nAlg D BL'\n\nAlg D BL' D BL D'\nAlg D BL' D' BL D'\nAlg B D R D' R' B'\nAlg B R D R' D' B'\nAlg D BL' D BL D' BL\nAlg D BL' D BL D' BL'\n\nAlg D BL D BL' D'\nAlg D BL D' BL' D'\nAlg B' BL' B BR D' BR'\nAlg D BL D BL' D' BL\nAlg D BL D BL' D' BL'\n\nAlg D' BL D\nAlg D' BL' D\nAlg D' BL D BL\nAlg D' BL D BL'\n\nAlg B D' B' BL B D B'\nAlg B D' B' BL' B D B'\nAlg D' BL' D BL D' BL D\n\nAlg B R' B' BL B R B'\nAlg B R' B' BL' B R B'\nAlg L R L' BL' L R' L'\n\nAlg F BL' B' BL F' BL' B\nAlg F' R' F BL F' R F\nAlg F' R' F BL' F' R F\nAlg BR R BR' BL' BR R' BR'\nAlg F L' BL U BL' U' L F'\nAlg F' U' F D F' U F D'\nAlg F BL F' D F BL' F' BL D'\n\nAlg F D F U' F' U D' F'\nAlg F D F' BL F BL' D' F'\nAlg F U D BL' U' BL D' F'\nAlg F U' D F U F' D' F'\nAlg F' BR L F BR' F' L' F\nAlg U R BL' F BL F' R' U'\n\nAlg BL\nAlg BL'\n\nAlg F U BL U' BL' F'\nAlg F BL U BL' U' F'\nAlg U BL BR BL' BR' U'\nAlg BR F BL F' BL' BR'\nAlg F U' F' U BL' U BL U'\n\nAlg F U' F' D F U F' D'\nAlg B' U' F U B U' F' U\nAlg D F U' F' D' F U F'\nAlg BR' U BR D' BR' U' BR D\nAlg D' BR BL' F BL' F' BL BR' BL D\n\nAlg D BL D F' U' B L' BL' L R' BR' R L' BL L B' U F D\nAlg B D BR F' R' BR' R B' F D' BL D B BR' D' B'\nAlg L B' BR' L F BR L' B BR' L U F U' BR' F L BL BR'\nAlg L BL' D' BR' B R' U' R BR B' D BL' L'\nAlg B BR B' D' B D B F' R' B' R BR' B' BR F BR' BL\nAlg L' BL D L' D' L' D L' U' R' F' R U D'\nAlg U' L BL L U' D R' BL B' BL F' BL' B R BL' U D' L U\nAlg L BL BR' L U' D R' F' R BL' U BL D' BR L\nAlg D L' R F' R' L BL' BR BL' B' BL B BR' F BL' F' D'\nAlg B BL B BR' L R' U' R BR L' B\nAlg L B' R' BR B F BL D' BL' D BL' B' F' BR' R U B L'\nAlg D' L' BL F' D' BL' D B F' R' BR R B' F' BL' L D\nAlg B D' R D' R' BL BR' B BR' B' BL' D' BR B R' B' R B' BL' D'\nAlg U' L R' F U L' BL' L B BL' B' BL L U' L' F' R L' U\nAlg F' D BL' BR' BL' BR B' U' F L F' U B D F L U BL' U' L'\nAlg L' U BR' U D R' BL F R BL' U D' BR' L' BL' BR' L'\nAlg U' L' U' D R' BL B' BL F BL' B R BL' U D' L' BL' L' U\nAlg D F BL L' BL' B L' B' L' B L' B' L' BL L BL' F' D'\nAlg F' BR' B BL' BR BL B' F L' F' L B BR' B' BR L' F L BL'\nAlg F' L F' L U' D R' F R U D' L' BL' F L' F\nAlg F U' F' BR F' R' BR' U F' L' BL F' D' BL'\nAlg B BR' U R BR' R' BR U' B' BR\nAlg F' BR' B BR' R BR' BL' BR R' BR BL B' BR F\nAlg L' U BL B' U' BL U BL' B BR BL' BR' U' L\nAlg BR BL' BR' BL L' BL BR BL' BR' L\nAlg U BR' U' BR L' BL BR BL' BR' L\nAlg U' L F BL' F' BL F' BR F BR' L' U\nAlg F L F' BL D F' D' F BL' L'\nAlg U BR' U BR L BL BR BL' BR' L' U\nAlg F BR R BL' F' BL' F R' BL BR' BL F'\nAlg D BL D B U BR' D BR' L' U' BR' U BR L D' BR U' B' D\nAlg U BL' U' BL U BL D L' D BR D' L D BR U BR U D\nAlg B' U F U' B' U F' BR' U' B L B' U BR U' B L' B BL\nAlg B U' B BL U' BL L U' D R' F' R U' D' L' BL' U B\nAlg B L R F D' BR' D F' R' BL' U' L U L' U BL L' B'\nAlg D BL D F' BR' F BL' D R' BR' R F D' BL F' BR D\nAlg L' D F' R' U BR L BL B' BL B BL' BR' L' U' R D' L\nAlg F BL' U D L' U' BR R F' R' BR' U L D BL U' D BL F'\nAlg BR' BL' U' L' BL D F' L' F' L F L U L' D' BR L BL\nAlg B' L' BL U D R' F' R U D' L' BL L U BL' L B\nAlg B BL' L U B' L BL' L B' U' B' L' D L' U' B L' B' D'\nAlg B' R' L U L' R BR BL' B BR' B' BL B' BL' B'\nAlg F L R BL B' U' B R' BL' L' BL F' BL BR' BL L BL' BR L'\nAlg B' U' BL L U D R' F R U D' L' BL' U BL' B' U B'\nAlg U BR BL' BR' D' B D' F' D B' D' F BL' U' BL' F' BL' F D'\nAlg D' BL' D L BL L' D' BL D F' D F D' BL' D' BL D\nAlg B' BL' B' BL L' B' BL' F' D F L F' D' F BL' L BL' B L B\nAlg F BL' U D' BL' D' L' U' BR R F R' BR' U L U' D' BL F'\nAlg U' D' B D F' D' BR' D' BR D BR B' BL' D F BL U BL'\nAlg B BL BR D' BR L' R F R' BR' L D BL' BR' BL' B'\nAlg L' F L' U BR' U' BR L F' BR' L U BR U'\nAlg F' BL' D' BR' BL B' U' BL U B BL' BR D F\nAlg F' D' BR' U R' U BL U' R U' BL' BR D F\nAlg F U' BR F' U' BL' B U F BR' R F' U BL L\nAlg B' BL' U' BL U B BL' B BL BR BL' BR' B' BL\nAlg D' F' U BL U' L F U' F' U L' BL' F D\nAlg F' BL' D' BR' BL BR' F' BR U' B' BR' U R' BR' F'\nAlg B' U' B BL' B U' B BL' L U' L BL' L B\nAlg F' D' F U' F U F' BL F' BL' D F\nAlg F' D BR F' R F R' BR' F D'\nAlg D BL D B BR' D L' BL' L' BL' BR' BL L BL L D' BR B' D\nAlg B L BL L' BL' L' D F' R' BR R D' F L' BL' L' B'\nAlg B BL' F' BL BR D' BR' F D' B' D L F' BL' F L D L D' BL\nAlg B D' BR' D' BR' F D' BL' D' BL D BL F' D BR D' B'\nAlg B D' B U B' D B F' BR' F L' F BR F' L U' B BL\nAlg L BL' B' U BL L' BL L U L' BL' L BL' U' B BL' L'\nAlg U D F' D BR BL' BR' BL B D' F D B' D BR BL BR' U'\nAlg F' D BR L' U' R F' R' U BR' L D BR' BL BR D F\nAlg BR' L BL L' BL' BR BL' F BL' L R BL B' U B R' BL' L' F'\nAlg D BL BR D B F' R' U' BR' U R B' F D' BR' D'\nAlg D' B BR' D L' BL' L' BL' BR BL L BL L D' BR B' D' BL' D'\nAlg B U' R B' BL' B R' U' B BL' B' U' BL B' U' L U L'\nAlg B D' B' D' BR' BL BR D' B' L B BR' U B U' BL' BR BL L' BL'\nAlg B D BR' D' F BL' D' BL' D BL D F' BR D BR D B'\nAlg D' B D F' D' BR' D' BR D BR BL BR' BL' BR B' BL' D F\nAlg L BL B' U BL L' BL L U' L' BL' L BL' U' B BL L'\nAlg B' U B' D' B U' B' D BL' U BL' U' BL' B' U BL' U'\nAlg D' BR' B' L' U L' B' U B L U' L B BR D BL\nAlg L' D L' F U' F' L D' L' F U BR F' L F BR' F' L BL'\nAlg D BR D B F' R' U' BR U R B' F D' BR' BL' D'\nAlg BR BL D F BR' BL BR BL' BR F' BR' D' BL' BR'\nAlg BR' U' L' BL F' BL' F L BL' U BL BR\nAlg D' BR' B' U BR U' BL U' BL' U BR' B BR D\nAlg F U BR' U R U' BR B U' F' BL U' L' U BL' B'\nAlg B U' L F BR F' L F' BR' F L U B'\nAlg BR BL F BL' L F' BR' BL' F BL L' BL' F' BL\nAlg U' BR' L BL' BR L U' BR' U L' BL L' U' BR U'\nAlg L' F L' U BR' U' BR L F' L BL' BR BL BR'\nAlg F' D' BR' BL U R' U BL' U' R U' BR D F\nAlg F' BR' B F' U F BR U' BR' B' F BL BR BL'\nAlg L B' U' R' BR B F BL D' BL D BL' B' F' BR' R B L'\nAlg B F BL B L F BR' R' BL U' R BL' BR' F' L' F' BR' B\nAlg U BR F' D F BR' U' L' BL L' BL' L U L B' BL L' B U'\nAlg F' L B F BL B R U' R' B' BL' B' F' L BL L F\nAlg D BL D B BR' D BR' D' BR D BR BL BR' BL' D' B' D\nAlg D' BR' BL B BR B' BL' D BL D' B' BL B BR' BL' BR D\nAlg D F' U BR U' L U' BR' U L' D B D' F D B' D BL\nAlg L B BL' B L F R U' R' F' L' B' BL B' L' BL'\nAlg B D' B U B' D F' BR F L' F BR' F' L B U' B BL\nAlg B' BL L B' L' B' L B' BR' R' U' R BR L'\nAlg D' F' U' B L' BL' L R' BR R L' BL L B' U F D' BL' D'\nAlg B' F' BL' B' F U D' R BR R' BL U' BL' D B'\nAlg F' BL' D BL F BL' D' B' U' B D F' D' B' F U B\nAlg F' L' BL' L' B F BL B R U R' B' BL' B' F' L' F\nAlg L' BL U' D F D' BL' D BL F' BL' D' BL D F' U D' BL L\nAlg B' BR L R' U R BR F L' B' BL' B L F' BR L' B\nAlg B' L B' BR' B L' B' D F' U F D' F U' F' BR B' BL'\nAlg B' BR D' BL' BR' BL B L' R' L' R BR L D L BL BR' B BL\nAlg L' D F' L F L' F D' L' BL' L' D BL' BR' BL' BR BL' D'\nAlg B' F BR F BR L R' BL U R BL' BR L' B' BL' B' F\nAlg F L' F' BR' B BR' F' BR B' BR' F' L F' BR'\nAlg BR' B' BR BL' D' BR D BR' BL B\nAlg L' F L' U BR' U' L U' BR U F' L\nAlg F U' BR' R U' BR BL BR' U' BL' U' R' F' BR U\nAlg B' BR' R' U' BL D' BL U BL' D R BL' BR B\nAlg D BR' U' L BL' F' BL F L' BL U BL' BR D'\nAlg F' BL' D' F BR' BL BR BL' BR F' BR' D BL F\nAlg F' BR' BL' BR D' F' BR F BR' D BL F\nAlg F' BR R' BR BL' BR' R BR' BL F\nAlg B BR F' BR' B' F BL F BL' F'\nAlg B D' B U B' D BL' F R' F BL F' R B F' U' B BL\nAlg L BL' B' U L U L BL L B' BL B' U' BL' U' B' L' BL\nAlg L' BL' U' D F D' BL' D BL F BL' D' BL D F' U D' BL' L\nAlg F' L F' BL' D' BR' B R' U' R BR B' D BL' F L' F\nAlg U D' BR' D BR' U' L U BR L' D' BR D L U' L' BL\nAlg B' BR' B' BL B L F' BR' R' U' R BR F BR L' B\nAlg U' F' D BR' F' BR D L D L' U D' B D' B' F D' BL F\nAlg B F BL B F' L F BR' R' BL U' R BL' BR' F' BR' L' B\nAlg F' D' BL B BR' BL BR BL' BR' D' BR' D BR D F D' B' D\nAlg B' BR' B' BL B L F BR' R' U' R BR F' BR L' B\nAlg L' F BR L' R' BR BL' BR' R BR' BL B' L F' L' B L' BL'\nAlg B' U' BL' U D' BL' D F L' R U R' F' L U' BL U B\nAlg D' B D BL BR BL' BR' D' BR' D BR D' BR B' D' BL' D'\nAlg B' BR' L F' BR' R' U R BR F L' B' BL' B BR B\nAlg L U L' D' BR' D L U' L' U D' BR D BR BL BR' BL' U' BL'\nAlg F' L F' BL D' B BR' R' U R B' BR D BL F L' F\nAlg B' L B' BR' B L' F' R F' BL F R' F BL' B' BR B' BL'\nAlg F' L BL' BR' R' BL U R BR B L' B L B L' F BL' B\nAlg L' F D' BR U' BR' D BR' U BR L' B' L F' L' B L' BL'\nAlg B' BR' L F BR' R' U R BR F' L' B' BL' B BR B\nAlg L F' D' F BR' BL BR BL' BR F' BR' D F L'\nAlg F' BL' D F BL' F' BL D' BR' BL BR F\nAlg B' BR' R' BL D' BL U' BL' D BL' U R BR B\nAlg B' L BL' BR BL L' B' F BL F' BL' B BR' B\nAlg F U' BR' R BR F' U BL L U BL' B U'\nAlg B' BR B' BL F BL' B F' L BL' BR' BL L' B\nAlg U' L BL' U' R U' BL' U R' U BL' L' U\nAlg F U' BR' R' F' BR' F BL BR R BL' F' BR U\nAlg B U' L' F' BR F L' F BR' F' L' U B'\nAlg F' BR' B' F BR' BL' BR F BL B F' BL BR BL'\nAlg B BL' U' L U BL' B' BL' B' L' BL U B' U' BL L BL L\nAlg B R' U' B U R B' BR F D' B' D BL F' BL' BR' BL\nAlg U BL U' B BL U BL U' BL D' B U B' D B U' B\nAlg B BL B BL' B BR B' BL BR' R' L U' L' R B\nAlg U' L BL' B BL B' L' F U B' R U R' U F' U B BL\nAlg F' BL' D' BR' L' B' L B BL BR BL' B' L' B L D BL F BL\nAlg L B' L' F U B' R BR B BR' R' BR BL' BR' BL B U' F' BL\nAlg D' F BL B BR' B BR B' BL' D BL D' B' F' D\nAlg B' L' BL F U F' L' U B U' L F U' F' BL' L BL' B BL B\nAlg D BL D B U F' R' BR' R F U' B' D\nAlg B BR B' D' BL BR D BR D B' BL' B D BR' BL' D' BL' D'\nAlg B' R BR B' BR' R' B U' F' L B L' BL' F BL U BL'\nAlg U BR BL' BR' D' B D' F' D B' BL' BR BL BR' D' F U' D'\nAlg U' D' BR' U' BR' D' L' D BR' D' L D' BL' U' BL' U BL U'\nAlg L' F' BR F' R F' R' L F' BR' D L BL' L' BL D' F BL'\nAlg B D BL' D B U R BR R' U' B' D' BL D' B' BL\nAlg B' U L' U B BL L' F' BL F D' B' U B D B' L B L'\nAlg L BL' B' U L F R U' R' F' U L F' L B L' F\nAlg L' D R' U BR L BL B' BL' B BL' BR' L' U' R F D' L\nAlg D' B U F' R' BR R F U' B' D' BL' D'\nAlg B D BL' B' U' BL L' D L D' BL' U B BL B' D'\nAlg B U' BL' U' F U' B U B' F' U BL U' B U' B\nAlg U BR' U L BL' L U' BR U BR' L' BL BR L' U\nAlg F' D' BR' BL B' U' BL' U B BL' BR D BL F\nAlg B' L' B' F BL' F' BL F' BR F BR' B L B\nAlg F' BL' D' BR F' BR' F D BR' BL BR F\nAlg F D' F' U' F' D' BR D F' D' BR' D' F' U\nAlg BR' BL' U' BL L U' F U F' L' U BR\nAlg F BR R U' BR B U BR' F BR BL' BR D BL F\nAlg F' BR' F U' BL L' U BL' B' F' BL' BR D' BL F\nAlg B' U L' B' U L' D F L F' D' L U' B L U' L B L'\nAlg B BL B L F BR' R' U' R BR F' L' B\nAlg B D' B BR' R' U' B' U R BR U' D' F L' F' U L' D' L\nAlg L U' L' U B BL' U B BL B' U R B' BL B R' U B'\nAlg D F' D BL U' R U' BL' U R' U B D' F D B' D BL\nAlg B BL U B BR' L R' F' U' F R BR L' B' U' B'\nAlg B' U' B F' D F D' B' U B D BL F' BL' D' BL F\nAlg B D BR B F' U' R' BR' R U B' F BR' D' BL B'\nAlg L B' F R BL' U' R' BL B F' L U BR' U' BL L U BR U'\nAlg F' L F' BL L U' D R' F' R U D' L' F L' F\nAlg L U L' F' BL' F L B BL' U BL' U' BL B' BL L U' L\nAlg B' L F BR' R' U R BR F' L' B' BL' B'\nAlg U BR' U' L' U' BR' F' BR F BR D R' F R U D' L' BL' L'\nAlg B L BL L F' D R' BR' R F D' L BL L BL' L' B'\nAlg F' BL' D F' D' B D' B' U' D L D BR' L' F BR D' F U\nAlg B U B BR' L R' F' U F R BR L' B' U' BL' B'\nAlg U B' L BL' B L' U' L' BL L BL' L U BR F' D' F BR' U'\nAlg B BL' D BR B F' U' R' BR R U B' F BR' D' B'\nAlg B BR B F BR' U BL' L R BR' R' L' F' U BR U BL B BL'\nAlg B' BR' L R' U R BR L' B' BL' B'\nAlg B' U BR' R L F' BR' F L' R' BR U' B' BR B'\nAlg F' BL' F' BR R U' BR B F BR BL' D F U BL'\nAlg F' BR' B' U BR' F BR' F' BR U' BR B BR F\nAlg BR' BL' U' BL L' F' BL F BL' L U BR\nAlg U' L BL U' R U' BL U R' U BL L' U\nAlg F BR' F' U' L F BR U F' U' L' BL U BL'\nAlg L' F U' BR' U L' U BR U' L F' L\nAlg F' BR' B' U' BR' U F BR B U' BL U BR BL'\nAlg F' BR' U BR D' BR U' BR' D F\nAlg F BL' BR R BL' F' BL F R' BL BR' F'\nAlg L BL' B BL' U BL U' BL B' L' F' BL F L U' L U L\nAlg B F BL B F' L F' BR' R' BL U' R BL' BR' F BR' L' B\nAlg F BL B' F' BR B' BR' B L F BL B' BR B BL' BR' F' L' B\nAlg B F D' BL U R BL' BR' R' U' D B F' BL B\nAlg L B' U B' BR B BR U' BR' B L' F BL' B F' BR' B' BL'\nAlg U' L R' F L U L' BL' B BL B' L' BL L U' F' R L' U\nAlg BR BL F BL' F' L' F' BR' L B BR B' L' F L B BR' B' BL\nAlg B' BR' L F L' B' BL B L F' BR' R' U' R BR' L' B\nAlg D L U' BR U L U' R BL' F' R' F BL F' BR' U L D BL D\nAlg B F BL B F BR' L R' BL U' R BL' BR' L' F BR' B\nAlg L B' L' U L' B' U L' D F L' F' D' L U' B L U' B\nAlg B' BR L F' BR R' BL U R BL' BR F L' B' F BL' B' F'\nAlg B' BL L B L' B' BL' L' U BL' U R' L' R U' BL U' L B\nAlg B U' D' F D B BL' B' U D' R BR R' U' F' U D B'\nAlg D F L F' L' F R L' BL B L B' BL' L R' F' L D'\nAlg L BL D' B BR' R' U R B' BR D BL L'\nAlg D F D' B' U' B U' D F' D' F U B' U B F' BL'\nAlg D' BR' BL BR B' BL' B D BL' D' BL B BR' B' BL' BR D\nAlg U BR' U' L U R' L R BR L' B' L' B L U' L' BL'\nAlg BR' L R' U R BR B L' B L B L' BL' B\nAlg B BR' B U BR' R L F' BR F L' R' BR U' B\nAlg F' L B' BR' B L BL' L' B' BR B L BL L F\nAlg D F U' F' U D' BR U' D' F U F' D BR'\nAlg B' BL' BR D' BR' D BL BR' B BR\nAlg B BL U' BR' L U BR' F' BL D BL BR F BR\nAlg L' U BR BL BR' B' BL U' BL' U B BL' U' L\nAlg U B' BL U' L' BL' U' F BR' R' BR U F'\nAlg D BR' BL U' BL' L F' BL' F BL L' U BR D'\nAlg BR L' BL BR' BL' L BL' BR BL BR'\nAlg F BL F' BL' B F' BR F BR' B'\nAlg D BR L' U' R F' R' U BR L BL B' BL B BL' BR D'\nAlg D' BL' D BL D F' D' F D' BL' D L BL' L' D' BL D\nAlg B F D' F' U' BL' B U B' BL F D B U' B' U B' F' BL\nAlg B U F' D' R BR' R' U' D B BL B' U F U' B'\nAlg B BL B L B BR' F BR B' BR' R' U' R F' BR L' B\nAlg B BL B L F' U' F' U F BR' R' U' R BR' F BR' L' B\nAlg B' U' B F' D F D' B' U B U' D BL' F' BL D' F U BL\nAlg L F' BR B' F' R BL' U' R' BL B F' BR L BL BR L\nAlg D F' D' BL F' D' F R BL B' L U L' B R' F' BL' D F\nAlg B BL BR BL D' BR L' R F' R' BR' L D BR' BL' B'\nAlg B' L B' BR' B L' BL' U BL U' B' BR B' U BL' U'\nAlg D' B BR' F BL' F' D BR D' BL F' BR B' F D' BL' D'\nAlg B D F' L' R F D BR' D' F' R BR' L D B' BL' D' F D'\nAlg D L BL' F' R U R' B F' L BL' L' B' F' BL L' D'\nAlg B' BR' L F R' U R BR B BR' F' BR B' L' B' BL' B'\nAlg D L F BL F L BL' L D' BL' D' F' D' F' L BL D' BL'\nAlg D F BL F' BR B' BL' B BL BR' BL L' R F R' L D'\nAlg L BL' B' L B L B' L F R U R' B F'\nAlg F' D' BL F R B' L U' L' B R' BL' F' D F BL' D F D'\nAlg B' L' BL U' D' L' BL' L U' D R' F R U' BL' L B\nAlg L' F L' BL U' BL' U L F' L U' BL U BL'\nAlg D' F' BL L U' F U F' L' U BL' U' F D\nAlg B' U F D F' U F D' F U B U' F U\nAlg U B' BR' U R' U' R BR U' B\nAlg F' BL' D F BL F' BR F' BR' F BL' D' BL F\nAlg F' BR' BL' BR D BL' F BL F' D' BL F\nAlg U' F R F' BL' F R' F BL F U\nAlg F' BR F BR' L BL' BR' BL BR L'\nAlg F U' B F U' BR U BR' U F' U' B' U F'\nAlg D F' BR R F' R' F BR' D' F\nAlg B D' B U B' D B U' B BR BL BR' D BL BR BL BR' BL D'\nAlg B' U' L' D' F D' L' F' L D F' D L U B BL'\nAlg D L' F R L' BL B L' B' BL' L R' F' L F L' F' D'\nAlg D L' D' BL D F' D F D' BL' L BL D'\nAlg D' B R U' B' F' BL' L BL L' BL B F U R' BR' B' D\nAlg D L BL' F L BL L' B' F R U' R' B F BL L' D'\nAlg D F' BL F BL U BL F' D B D' F D B' D BR BL BR' U'\nAlg B F' BL B F' BR' F' L F R' U' R BL' BR BL F' L' B\nAlg L F BR B' D BL D' R U' R' D BL' D' B BR' F' L BL L\nAlg B F BL B F' BR' L R' U' R BL' BR BL L' B\nAlg D' B U BR' D BR' L' U' BR U BR L D' BR U' B' D' BL' D'\nAlg F' D' BR' BL' BR D' BR L' U' R F R' U BR' L D' F\nAlg D F U D' BL U' B D' F BR F' D' F' D BR' D B' BL\nAlg B U' D' F D BL' D' BR D' BR' D BL B' BL' B F' U D B'\nAlg L' BL' L' F BR B' D BL D' R U R' D BL' D' B BR' F' L'\nAlg B U F' U' B BL' B' U D' R BR R' D F U' B'\nAlg B L BL' U' L U' L' U R BL F D' BR D F' R' L' B'\nAlg B' L B' BR' B L' F' BL F BL' B' BR B' F U' F' U BL'\nAlg D' B BR R U' B' F' BL' L BL' L' BL B F U R' B' D\nAlg B BL' U' B BL' B D B D' B D B D' BL B' U BL B'\nAlg U BR' U' BR L' F BR' L' U BR U' L F' L\nAlg L' U BR BL BR' B U BR' U' BR B' BL' U' L\nAlg BR BL D BR' BL' L BL' BR BL L' BL D' BL' BR'\nAlg F' BL' D' BR' D BL BR' B U BR U' B' BR F\nAlg F U' F' D F' U' B' U F' U' B U' F' D'\nAlg B' U BR' R' U R U' BR B U'\nAlg L U BL U' BL' L' BL L' F' BL' F BL L BL'\nAlg U B' BL' BR' U F' BR' D' F BR' U BL' L' BL'\nAlg F BL' L' F' BL D' F' BR U' R' F' U F' BR'\nAlg U B U' BL L U' L' U BL' B'\nAlg U BL U' B BR' B U BL' U' BL L B' BR B L' B\nAlg B BL B L F' U' F U F BR' R' U' R BR' F' BR' L' B\nAlg B BR D L' D' F' D F D' F' D' F D' BR' L D' B D B\nAlg F' L B' L' F L' U' F R U R' F' L' U' B BL L'\nAlg B' L' F U F L' F R U' R' U L F R U R' U B F' BL\nAlg B U F' D' F' U R BR' R' U' F D B BL B' F U' B'\nAlg F BL U BL' U' F' BL L U' L D BR L' U L U' BR' U D' L\nAlg B U' D' B' F BL B BL' D' BR D BR' D BL D' F' U D B'\nAlg B BL' D' B' D B BL D BR' BL BR' R D R' BR BL' BR D' B'\nAlg B F U' F' D' F' U' R BL' BR' R' BL U' F D B BL B\nAlg D BR' BL B' BL' B BL' BR' L' U' R F R' U BR' L D'\nAlg B' F' U' F' BL' D' B BR' R' U R B' BR D F U B F\nAlg B' D' B' D BR L' D F' D F D F' D' F D L D' BR' B'\nAlg D' B F D BL' D' BL B BR' B' BR B' BL' F' D\nAlg B D B' F BL L' BL' F' L BL L' BL' BR L R L' R' BR' L' D'\nAlg B U B F' BL' B' D' F' U R BR R' U' F D F U' B'\nAlg BR BL' L' F' BR U F' U' BR L' B' BR' L F' BR L' B L'\nAlg D BL' L' BL D F' D' F D' BL' D L D'\nAlg F' BL' B F U' B U B' D' F' BL' B U' B' BL U F D B'\nAlg B' F' L BL' BR' R' BL U R BR L' B' F BL' B'\nAlg BR BL' BR' BL L' F L' BL' BR BL BR' L F' L\nAlg B BL BR' F U' L F U BR' F BL D BR' BL\nAlg B' BL' B' U BR' U' BR BL' BR BL BR' B BL B\nAlg BR' U' L F U' F' U L' BL' U BL BR\nAlg B U BR R' BR U' B' BR U' B' U BR' R' BR\nAlg B BR BL L BL BR' BL' L U' BL' U BL L BL' B'\nAlg F' BR' B BL' BR' R BR' BL BR R' BR B' BR F\nAlg F' BR' B U BR' U' B' BR BL' D' BR D BL F\nAlg D' F' BR U' R' F' U F' BR' F BL' L' F' BL\nAlg B BL U' L U L' BL' U B' U'\nAlg L' F' R B F' BR L' D' F' D BR' L B' F R' F BL L\nAlg D F BL L' BL' B L B' L B L B' L BL L BL' F' D'\nAlg B BL B BR' L R' U' R BR L' B U BR' U' BR BL' BR BL BR'\nAlg B' F R U' R' F' L' B L' B' L' B BL L'\nAlg B' L' F D R' F' L' U L F R' U D' L' B BL L F' L\nAlg D' L' BL F R' BR' R B' F D' BL D B F BL' L D\nAlg B' BR' R' U' BL' U' L R' F R F' L' R U' BL BR B BL\nAlg BR L BL BR L U' D R' BL F' R BL' U' D' BR U' L\nAlg BR L B' L F R F U F' U' R' L' B L F' BR' L BL\nAlg B F U D' R BL' BR' R' BL U' D B F' BL B\nAlg L' BL L' D B D' BL' B' D' L R' D R BL' U' L U BL'\nAlg L' D BL' U' R' BL F R U D' BR L' BL' BR' L'\nAlg U BR' U' L' BL' U BR U' L' B' F R BL' U R' BL B F' L'\nAlg BR L' BL' L' B' F R BL' U R' BL B F BR F BR L'\nAlg B' F' L F BR BL B' BR' B BL' F' L' B' BR B BR' B F BL'\nAlg B D BR B' D' BL' D B F' R' BR R F BR' D' B'\nAlg D BL' L' BL' L BL L' BL F' BL' L' F L BL F BL' L D'\nAlg U' D R' F R U L D' L D L D' BL' L\nAlg U D' BR D' L' D R F BR F' BR' R' BR' D' L U' D' BL'\nAlg B' F' BR' L R' BL U R BL' BR L' B' F BL' B'\nAlg L' F BL' F' BL F' BR F BR' L\nAlg L BL F' D F D' BL' F L' F'\nAlg F' D' BR U BR' D BR' U' BR F\nAlg BR' L BL' BR BL BR L' F' BR' F\nAlg B BR F BR' B' BR F' R' BR' BL' BR R BR' BL\nAlg BR' B U BR' R BR R' U' BR B'\nAlg F' BL' BR R' BR BL BR' R BR' F\nAlg BR L' BL BR' BL' BR' L U BR U'\nAlg U BR' U' BR BL' BR BL BR'\n`,\n  );\n}\n","import { Alg } from \"../../../alg\";\nimport type { KPuzzle, KTransformation } from \"../../../kpuzzle\";\n\ninterface PieceReference {\n  orbitName: string;\n  permutationIdx: number;\n}\n\nexport interface SGSAction {\n  alg: Alg;\n  transformation: KTransformation;\n}\n\nexport interface SGSCachedData {\n  ordering: {\n    pieceOrdering: PieceReference[];\n    lookup: Record<string, SGSAction>;\n  }[];\n}\n\nexport function parseSGS(kpuzzle: KPuzzle, sgs: string): SGSCachedData {\n  const subgroupSizes: number[] = [];\n  const sgsActions: SGSAction[] = [];\n  for (const line of sgs.split(\"\\n\")) {\n    const lineTokens = line.split(\" \");\n    if (line.startsWith(\"SetOrder \")) {\n      // ignore\n    } else if (line.startsWith(\"Alg \")) {\n      const alg = Alg.fromString(line.substring(4));\n      sgsActions.push({\n        alg: alg,\n        transformation: kpuzzle.algToTransformation(alg),\n      });\n    } else if (line.startsWith(\"SubgroupSizes \")) {\n      for (let j = 1; j < lineTokens.length; j++) {\n        subgroupSizes.push(parseInt(lineTokens[j]));\n      }\n    }\n  }\n\n  const sgsCachedData: SGSCachedData = {\n    ordering: new Array(subgroupSizes.length),\n  };\n  const subgroupAlgOffsets: number[] = [];\n  let sum = 0;\n  subgroupAlgOffsets.push(0);\n  const emptyAlg = Alg.fromString(\"\");\n  const identity = kpuzzle.identityTransformation();\n  for (let i = 0; i < subgroupSizes.length; i++) {\n    sum += subgroupSizes[i];\n    subgroupAlgOffsets.push(sum);\n    sgsActions.splice(sum - 1, 0, { alg: emptyAlg, transformation: identity });\n  }\n  if (sgsActions.length !== sum) {\n    throw Error(\n      `Bad sgs; expected ${sum - subgroupSizes.length} algs but saw ${\n        sgsActions.length - subgroupSizes.length\n      }`,\n    );\n  }\n  const processedPieces: Record<string, boolean[]> = {};\n  for (const orbitDefinition of kpuzzle.definition.orbits) {\n    processedPieces[orbitDefinition.orbitName] = new Array(\n      orbitDefinition.numPieces,\n    ).fill(false);\n  }\n  for (let i = subgroupSizes.length - 1; i >= 0; i--) {\n    const pieceOrdering: PieceReference[] = [];\n    for (let j = subgroupAlgOffsets[i]; j < subgroupAlgOffsets[i + 1]; j++) {\n      const transformation = sgsActions[j].transformation;\n      for (const orbitDefinition of kpuzzle.definition.orbits) {\n        for (let idx = 0; idx < orbitDefinition.numPieces; idx++) {\n          if (\n            transformation.transformationData[orbitDefinition.orbitName]\n              .permutation[idx] !== idx ||\n            transformation.transformationData[orbitDefinition.orbitName]\n              .orientationDelta[idx] !== 0\n          ) {\n            if (!processedPieces[orbitDefinition.orbitName][idx]) {\n              pieceOrdering.push({\n                orbitName: orbitDefinition.orbitName,\n                permutationIdx: idx,\n              });\n              processedPieces[orbitDefinition.orbitName][idx] = true;\n            }\n          }\n        }\n      }\n    }\n    const lookup: Record<string, SGSAction> = {};\n    for (let j = subgroupAlgOffsets[i]; j < subgroupAlgOffsets[i + 1]; j++) {\n      const transformation = sgsActions[j].transformation.invert();\n      let key = \"\";\n      for (let k = 0; k < pieceOrdering.length; k++) {\n        const loc = pieceOrdering[k];\n        key = `${key} ${\n          transformation.transformationData[loc.orbitName].permutation[\n            loc.permutationIdx\n          ]\n        } ${\n          transformation.transformationData[loc.orbitName].orientationDelta[\n            loc.permutationIdx\n          ]\n        }`;\n      }\n      lookup[key] = sgsActions[j];\n      sgsActions[j].alg = sgsActions[j].alg.invert();\n      sgsActions[j].transformation = sgsActions[j].transformation.invert();\n    }\n    sgsCachedData.ordering[i] = {\n      pieceOrdering: pieceOrdering,\n      lookup: lookup,\n    };\n  }\n  return sgsCachedData;\n}\n"],"names":["factorial","n","f","i","C","k","c","permutation_parity","A","length","parity","j","evenpermutation_to_index","perm","slice","ind","e","x","permutation_to_index","comb_to_index","l","bits","ones","zeros","b","index_to_comb","push","compose","B","C2","permutation_from_cycle","cycle","unsparsify_list","d","Array","fill","compose_state","state1","state2","o","move_UL","move_U","move_UR","move_F","move_L","move_B","move_R","move_D","moves","index_to_permutation","move_names","tetrad","generate_random_state","p","index_to_evenpermutation","Math","floor","randomUIntBelow","generate_random_state_scramble","state","best","phase1_indices","edge_ind","indexOf","corner_ind","filtered","map","max","separate_ind","filter","index_phase1","phase1_mtables","generate_phase1_edge_mtable","generate_phase1_separate_mtable","phase1_ptables","generate_phase1_edge_ptable","generate_phase1_separate_ptable","phase2_mtables","generate_phase2_edge_mtable","generate_phase2_corner_mtable","phase2_ptables","generate_phase2_edge_ptable","generate_phase1_corner_ptable","phase1gen","indices","mtables","ptables","ncoords","bound","ida_search_gen","ida_solve_gen","intermediate_states","Set","start_time","Date","value","sol1","done","next","new_state","m","r","i2","has","toString","add","sol2","ida_solve","concat","solve","tables","generate_phase1_corner_mtable","phase1cm","mtable","phase1cp","ptable","phase1em","mtable_single","I","phase1ep","bfs","phase1sm","C12_4","mtable_c","comb","new_perm","new_comb","mtable_co","m0","m1","phase1sp","phase2cm","phase1_mtable","phase2em","HALFFACT8","L","phase2ep","goal_states","N","nmoves","queue","new_queue","depth","move_index","max_bound","path","ida_search","last","heuristic","new_indices","some","_","subpath","subpath_gen","getRandomRediCubeScramble","Alg","move_sequence","suffixes","_ref","join","stringify_move_sequence","cachedData","sgsDataFTO","async","parseSGS","puzzles","kpuzzle","uncachedSGSDataFTO","sgs","subgroupSizes","sgsActions","line","split","lineTokens","startsWith","alg","fromString","substring","transformation","algToTransformation","parseInt","sgsCachedData","ordering","subgroupAlgOffsets","sum","emptyAlg","identity","identityTransformation","splice","Error","processedPieces","orbitDefinition","definition","orbits","orbitName","numPieces","pieceOrdering","idx","transformationData","permutation","orientationDelta","permutationIdx","lookup","invert","key","loc"],"sourceRoot":""}